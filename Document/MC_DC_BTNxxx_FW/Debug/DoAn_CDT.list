
DoAn_CDT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009924  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009a30  08009a30  00019a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a98  08009a98  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08009a98  08009a98  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a98  08009a98  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08009aa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  200001a0  08009c40  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  08009c40  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3b5  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b11  00000000  00000000  0003a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0003f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba7d  00000000  00000000  00040428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016822  00000000  00000000  0005bea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009312f  00000000  00000000  000726c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001057f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e54  00000000  00000000  0010584c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009a18 	.word	0x08009a18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	08009a18 	.word	0x08009a18

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <__aeabi_d2f>:
 8000504:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000508:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800050c:	bf24      	itt	cs
 800050e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000512:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000516:	d90d      	bls.n	8000534 <__aeabi_d2f+0x30>
 8000518:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800051c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000520:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000524:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000528:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800052c:	bf08      	it	eq
 800052e:	f020 0001 	biceq.w	r0, r0, #1
 8000532:	4770      	bx	lr
 8000534:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000538:	d121      	bne.n	800057e <__aeabi_d2f+0x7a>
 800053a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800053e:	bfbc      	itt	lt
 8000540:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000544:	4770      	bxlt	lr
 8000546:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800054a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800054e:	f1c2 0218 	rsb	r2, r2, #24
 8000552:	f1c2 0c20 	rsb	ip, r2, #32
 8000556:	fa10 f30c 	lsls.w	r3, r0, ip
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	bf18      	it	ne
 8000560:	f040 0001 	orrne.w	r0, r0, #1
 8000564:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000568:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800056c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000570:	ea40 000c 	orr.w	r0, r0, ip
 8000574:	fa23 f302 	lsr.w	r3, r3, r2
 8000578:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800057c:	e7cc      	b.n	8000518 <__aeabi_d2f+0x14>
 800057e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000582:	d107      	bne.n	8000594 <__aeabi_d2f+0x90>
 8000584:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000588:	bf1e      	ittt	ne
 800058a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800058e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000592:	4770      	bxne	lr
 8000594:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000598:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800059c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <__aeabi_fmul>:
 80005a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005ac:	bf1e      	ittt	ne
 80005ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b2:	ea92 0f0c 	teqne	r2, ip
 80005b6:	ea93 0f0c 	teqne	r3, ip
 80005ba:	d06f      	beq.n	800069c <__aeabi_fmul+0xf8>
 80005bc:	441a      	add	r2, r3
 80005be:	ea80 0c01 	eor.w	ip, r0, r1
 80005c2:	0240      	lsls	r0, r0, #9
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80005ca:	d01e      	beq.n	800060a <__aeabi_fmul+0x66>
 80005cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80005d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80005d8:	fba0 3101 	umull	r3, r1, r0, r1
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80005e4:	bf3e      	ittt	cc
 80005e6:	0049      	lslcc	r1, r1, #1
 80005e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80005ec:	005b      	lslcc	r3, r3, #1
 80005ee:	ea40 0001 	orr.w	r0, r0, r1
 80005f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80005f6:	2afd      	cmp	r2, #253	; 0xfd
 80005f8:	d81d      	bhi.n	8000636 <__aeabi_fmul+0x92>
 80005fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80005fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000602:	bf08      	it	eq
 8000604:	f020 0001 	biceq.w	r0, r0, #1
 8000608:	4770      	bx	lr
 800060a:	f090 0f00 	teq	r0, #0
 800060e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000612:	bf08      	it	eq
 8000614:	0249      	lsleq	r1, r1, #9
 8000616:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800061a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800061e:	3a7f      	subs	r2, #127	; 0x7f
 8000620:	bfc2      	ittt	gt
 8000622:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000626:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800062a:	4770      	bxgt	lr
 800062c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	3a01      	subs	r2, #1
 8000636:	dc5d      	bgt.n	80006f4 <__aeabi_fmul+0x150>
 8000638:	f112 0f19 	cmn.w	r2, #25
 800063c:	bfdc      	itt	le
 800063e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000642:	4770      	bxle	lr
 8000644:	f1c2 0200 	rsb	r2, r2, #0
 8000648:	0041      	lsls	r1, r0, #1
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	f1c2 0220 	rsb	r2, r2, #32
 8000652:	fa00 fc02 	lsl.w	ip, r0, r2
 8000656:	ea5f 0031 	movs.w	r0, r1, rrx
 800065a:	f140 0000 	adc.w	r0, r0, #0
 800065e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000662:	bf08      	it	eq
 8000664:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000668:	4770      	bx	lr
 800066a:	f092 0f00 	teq	r2, #0
 800066e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000672:	bf02      	ittt	eq
 8000674:	0040      	lsleq	r0, r0, #1
 8000676:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800067a:	3a01      	subeq	r2, #1
 800067c:	d0f9      	beq.n	8000672 <__aeabi_fmul+0xce>
 800067e:	ea40 000c 	orr.w	r0, r0, ip
 8000682:	f093 0f00 	teq	r3, #0
 8000686:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800068a:	bf02      	ittt	eq
 800068c:	0049      	lsleq	r1, r1, #1
 800068e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000692:	3b01      	subeq	r3, #1
 8000694:	d0f9      	beq.n	800068a <__aeabi_fmul+0xe6>
 8000696:	ea41 010c 	orr.w	r1, r1, ip
 800069a:	e78f      	b.n	80005bc <__aeabi_fmul+0x18>
 800069c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a0:	ea92 0f0c 	teq	r2, ip
 80006a4:	bf18      	it	ne
 80006a6:	ea93 0f0c 	teqne	r3, ip
 80006aa:	d00a      	beq.n	80006c2 <__aeabi_fmul+0x11e>
 80006ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006b0:	bf18      	it	ne
 80006b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006b6:	d1d8      	bne.n	800066a <__aeabi_fmul+0xc6>
 80006b8:	ea80 0001 	eor.w	r0, r0, r1
 80006bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80006c0:	4770      	bx	lr
 80006c2:	f090 0f00 	teq	r0, #0
 80006c6:	bf17      	itett	ne
 80006c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80006cc:	4608      	moveq	r0, r1
 80006ce:	f091 0f00 	teqne	r1, #0
 80006d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80006d6:	d014      	beq.n	8000702 <__aeabi_fmul+0x15e>
 80006d8:	ea92 0f0c 	teq	r2, ip
 80006dc:	d101      	bne.n	80006e2 <__aeabi_fmul+0x13e>
 80006de:	0242      	lsls	r2, r0, #9
 80006e0:	d10f      	bne.n	8000702 <__aeabi_fmul+0x15e>
 80006e2:	ea93 0f0c 	teq	r3, ip
 80006e6:	d103      	bne.n	80006f0 <__aeabi_fmul+0x14c>
 80006e8:	024b      	lsls	r3, r1, #9
 80006ea:	bf18      	it	ne
 80006ec:	4608      	movne	r0, r1
 80006ee:	d108      	bne.n	8000702 <__aeabi_fmul+0x15e>
 80006f0:	ea80 0001 	eor.w	r0, r0, r1
 80006f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80006f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000700:	4770      	bx	lr
 8000702:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000706:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800070a:	4770      	bx	lr

0800070c <__aeabi_fdiv>:
 800070c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000710:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000714:	bf1e      	ittt	ne
 8000716:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800071a:	ea92 0f0c 	teqne	r2, ip
 800071e:	ea93 0f0c 	teqne	r3, ip
 8000722:	d069      	beq.n	80007f8 <__aeabi_fdiv+0xec>
 8000724:	eba2 0203 	sub.w	r2, r2, r3
 8000728:	ea80 0c01 	eor.w	ip, r0, r1
 800072c:	0249      	lsls	r1, r1, #9
 800072e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000732:	d037      	beq.n	80007a4 <__aeabi_fdiv+0x98>
 8000734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000738:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800073c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000740:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000744:	428b      	cmp	r3, r1
 8000746:	bf38      	it	cc
 8000748:	005b      	lslcc	r3, r3, #1
 800074a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800074e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000752:	428b      	cmp	r3, r1
 8000754:	bf24      	itt	cs
 8000756:	1a5b      	subcs	r3, r3, r1
 8000758:	ea40 000c 	orrcs.w	r0, r0, ip
 800075c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000760:	bf24      	itt	cs
 8000762:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000766:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800076a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800076e:	bf24      	itt	cs
 8000770:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000774:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000778:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800077c:	bf24      	itt	cs
 800077e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000782:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	bf18      	it	ne
 800078a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800078e:	d1e0      	bne.n	8000752 <__aeabi_fdiv+0x46>
 8000790:	2afd      	cmp	r2, #253	; 0xfd
 8000792:	f63f af50 	bhi.w	8000636 <__aeabi_fmul+0x92>
 8000796:	428b      	cmp	r3, r1
 8000798:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800079c:	bf08      	it	eq
 800079e:	f020 0001 	biceq.w	r0, r0, #1
 80007a2:	4770      	bx	lr
 80007a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007ac:	327f      	adds	r2, #127	; 0x7f
 80007ae:	bfc2      	ittt	gt
 80007b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007b8:	4770      	bxgt	lr
 80007ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007be:	f04f 0300 	mov.w	r3, #0
 80007c2:	3a01      	subs	r2, #1
 80007c4:	e737      	b.n	8000636 <__aeabi_fmul+0x92>
 80007c6:	f092 0f00 	teq	r2, #0
 80007ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ce:	bf02      	ittt	eq
 80007d0:	0040      	lsleq	r0, r0, #1
 80007d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007d6:	3a01      	subeq	r2, #1
 80007d8:	d0f9      	beq.n	80007ce <__aeabi_fdiv+0xc2>
 80007da:	ea40 000c 	orr.w	r0, r0, ip
 80007de:	f093 0f00 	teq	r3, #0
 80007e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007e6:	bf02      	ittt	eq
 80007e8:	0049      	lsleq	r1, r1, #1
 80007ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ee:	3b01      	subeq	r3, #1
 80007f0:	d0f9      	beq.n	80007e6 <__aeabi_fdiv+0xda>
 80007f2:	ea41 010c 	orr.w	r1, r1, ip
 80007f6:	e795      	b.n	8000724 <__aeabi_fdiv+0x18>
 80007f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007fc:	ea92 0f0c 	teq	r2, ip
 8000800:	d108      	bne.n	8000814 <__aeabi_fdiv+0x108>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	f47f af7d 	bne.w	8000702 <__aeabi_fmul+0x15e>
 8000808:	ea93 0f0c 	teq	r3, ip
 800080c:	f47f af70 	bne.w	80006f0 <__aeabi_fmul+0x14c>
 8000810:	4608      	mov	r0, r1
 8000812:	e776      	b.n	8000702 <__aeabi_fmul+0x15e>
 8000814:	ea93 0f0c 	teq	r3, ip
 8000818:	d104      	bne.n	8000824 <__aeabi_fdiv+0x118>
 800081a:	024b      	lsls	r3, r1, #9
 800081c:	f43f af4c 	beq.w	80006b8 <__aeabi_fmul+0x114>
 8000820:	4608      	mov	r0, r1
 8000822:	e76e      	b.n	8000702 <__aeabi_fmul+0x15e>
 8000824:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000828:	bf18      	it	ne
 800082a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800082e:	d1ca      	bne.n	80007c6 <__aeabi_fdiv+0xba>
 8000830:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000834:	f47f af5c 	bne.w	80006f0 <__aeabi_fmul+0x14c>
 8000838:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800083c:	f47f af3c 	bne.w	80006b8 <__aeabi_fmul+0x114>
 8000840:	e75f      	b.n	8000702 <__aeabi_fmul+0x15e>
 8000842:	bf00      	nop

08000844 <__gesf2>:
 8000844:	f04f 3cff 	mov.w	ip, #4294967295
 8000848:	e006      	b.n	8000858 <__cmpsf2+0x4>
 800084a:	bf00      	nop

0800084c <__lesf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	e002      	b.n	8000858 <__cmpsf2+0x4>
 8000852:	bf00      	nop

08000854 <__cmpsf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	f84d cd04 	str.w	ip, [sp, #-4]!
 800085c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000860:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000864:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000868:	bf18      	it	ne
 800086a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800086e:	d011      	beq.n	8000894 <__cmpsf2+0x40>
 8000870:	b001      	add	sp, #4
 8000872:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000876:	bf18      	it	ne
 8000878:	ea90 0f01 	teqne	r0, r1
 800087c:	bf58      	it	pl
 800087e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000882:	bf88      	it	hi
 8000884:	17c8      	asrhi	r0, r1, #31
 8000886:	bf38      	it	cc
 8000888:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800088c:	bf18      	it	ne
 800088e:	f040 0001 	orrne.w	r0, r0, #1
 8000892:	4770      	bx	lr
 8000894:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000898:	d102      	bne.n	80008a0 <__cmpsf2+0x4c>
 800089a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800089e:	d105      	bne.n	80008ac <__cmpsf2+0x58>
 80008a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80008a4:	d1e4      	bne.n	8000870 <__cmpsf2+0x1c>
 80008a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80008aa:	d0e1      	beq.n	8000870 <__cmpsf2+0x1c>
 80008ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <__aeabi_cfrcmple>:
 80008b4:	4684      	mov	ip, r0
 80008b6:	4608      	mov	r0, r1
 80008b8:	4661      	mov	r1, ip
 80008ba:	e7ff      	b.n	80008bc <__aeabi_cfcmpeq>

080008bc <__aeabi_cfcmpeq>:
 80008bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80008be:	f7ff ffc9 	bl	8000854 <__cmpsf2>
 80008c2:	2800      	cmp	r0, #0
 80008c4:	bf48      	it	mi
 80008c6:	f110 0f00 	cmnmi.w	r0, #0
 80008ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080008cc <__aeabi_fcmpeq>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff fff4 	bl	80008bc <__aeabi_cfcmpeq>
 80008d4:	bf0c      	ite	eq
 80008d6:	2001      	moveq	r0, #1
 80008d8:	2000      	movne	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_fcmplt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffea 	bl	80008bc <__aeabi_cfcmpeq>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_fcmple>:
 80008f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008f8:	f7ff ffe0 	bl	80008bc <__aeabi_cfcmpeq>
 80008fc:	bf94      	ite	ls
 80008fe:	2001      	movls	r0, #1
 8000900:	2000      	movhi	r0, #0
 8000902:	f85d fb08 	ldr.w	pc, [sp], #8
 8000906:	bf00      	nop

08000908 <__aeabi_fcmpge>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff ffd2 	bl	80008b4 <__aeabi_cfrcmple>
 8000910:	bf94      	ite	ls
 8000912:	2001      	movls	r0, #1
 8000914:	2000      	movhi	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_fcmpgt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffc8 	bl	80008b4 <__aeabi_cfrcmple>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 fc69 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	2000      	movs	r0, #0
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f008 f9ee 	bl	8008d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fc81 	bl	8001282 <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 fc49 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000013c 	.word	0x2000013c
 80009b4:	20000004 	.word	0x20000004
 80009b8:	20000000 	.word	0x20000000

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000004 	.word	0x20000004
 80009dc:	200003e8 	.word	0x200003e8

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	200003e8 	.word	0x200003e8

080009f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e0be      	b.n	8000b94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d109      	bne.n	8000a38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f008 f9ac 	bl	8008d90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 fad7 	bl	8000fec <ADC_ConversionStop_Disable>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f040 8099 	bne.w	8000b82 <HAL_ADC_Init+0x18e>
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 8095 	bne.w	8000b82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a60:	f023 0302 	bic.w	r3, r3, #2
 8000a64:	f043 0202 	orr.w	r2, r3, #2
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7b1b      	ldrb	r3, [r3, #12]
 8000a7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d003      	beq.n	8000a96 <HAL_ADC_Init+0xa2>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d102      	bne.n	8000a9c <HAL_ADC_Init+0xa8>
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	e000      	b.n	8000a9e <HAL_ADC_Init+0xaa>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7d1b      	ldrb	r3, [r3, #20]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d119      	bne.n	8000ae0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7b1b      	ldrb	r3, [r3, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d109      	bne.n	8000ac8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	035a      	lsls	r2, r3, #13
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	e00b      	b.n	8000ae0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	f043 0220 	orr.w	r2, r3, #32
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_ADC_Init+0x1a8>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b10:	d003      	beq.n	8000b1a <HAL_ADC_Init+0x126>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d104      	bne.n	8000b24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	051b      	lsls	r3, r3, #20
 8000b22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_ADC_Init+0x1ac>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d10b      	bne.n	8000b60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	f023 0303 	bic.w	r3, r3, #3
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b5e:	e018      	b.n	8000b92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	f023 0312 	bic.w	r3, r3, #18
 8000b68:	f043 0210 	orr.w	r2, r3, #16
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	f043 0201 	orr.w	r2, r3, #1
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b80:	e007      	b.n	8000b92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f043 0210 	orr.w	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000ba0:	ff1f0efe 	.word	0xff1f0efe

08000ba4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d140      	bne.n	8000c3c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d139      	bne.n	8000c3c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bee:	d11d      	bne.n	8000c2c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d119      	bne.n	8000c2c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0220 	bic.w	r2, r2, #32
 8000c06:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f043 0201 	orr.w	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f87c 	bl	8000d2a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f06f 0212 	mvn.w	r2, #18
 8000c3a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	2b80      	cmp	r3, #128	; 0x80
 8000c48:	d14f      	bne.n	8000cea <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d148      	bne.n	8000cea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d105      	bne.n	8000c70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000c7a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000c7e:	d012      	beq.n	8000ca6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d125      	bne.n	8000cda <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c9c:	d11d      	bne.n	8000cda <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d119      	bne.n	8000cda <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d105      	bne.n	8000cda <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f9c7 	bl	800106e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f06f 020c 	mvn.w	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf4:	2b40      	cmp	r3, #64	; 0x40
 8000cf6:	d114      	bne.n	8000d22 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10d      	bne.n	8000d22 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f812 	bl	8000d3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f06f 0201 	mvn.w	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
	...

08000d50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d101      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x20>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e0dc      	b.n	8000f2a <HAL_ADC_ConfigChannel+0x1da>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d81c      	bhi.n	8000dba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	3b05      	subs	r3, #5
 8000d92:	221f      	movs	r2, #31
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4019      	ands	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	3b05      	subs	r3, #5
 8000dac:	fa00 f203 	lsl.w	r2, r0, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	; 0x34
 8000db8:	e03c      	b.n	8000e34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d81c      	bhi.n	8000dfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b23      	subs	r3, #35	; 0x23
 8000dd4:	221f      	movs	r2, #31
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4019      	ands	r1, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	3b23      	subs	r3, #35	; 0x23
 8000dee:	fa00 f203 	lsl.w	r2, r0, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfa:	e01b      	b.n	8000e34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b41      	subs	r3, #65	; 0x41
 8000e0e:	221f      	movs	r2, #31
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4019      	ands	r1, r3
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	3b41      	subs	r3, #65	; 0x41
 8000e28:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	d91c      	bls.n	8000e76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68d9      	ldr	r1, [r3, #12]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b1e      	subs	r3, #30
 8000e4e:	2207      	movs	r2, #7
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6898      	ldr	r0, [r3, #8]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	3b1e      	subs	r3, #30
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	e019      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6919      	ldr	r1, [r3, #16]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	2207      	movs	r2, #7
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4019      	ands	r1, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6898      	ldr	r0, [r3, #8]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b10      	cmp	r3, #16
 8000eb0:	d003      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eb6:	2b11      	cmp	r3, #17
 8000eb8:	d132      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d125      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d126      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ee0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b10      	cmp	r3, #16
 8000ee8:	d11a      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_ADC_ConfigChannel+0x1e8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <HAL_ADC_ConfigChannel+0x1ec>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	0c9a      	lsrs	r2, r3, #18
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x1b2>
 8000f0e:	e007      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	f043 0220 	orr.w	r2, r3, #32
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40012400 	.word	0x40012400
 8000f38:	2000013c 	.word	0x2000013c
 8000f3c:	431bde83 	.word	0x431bde83

08000f40 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a24      	ldr	r2, [pc, #144]	; (8000fe0 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d003      	beq.n	8000f5c <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8000f5a:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_AnalogWDGConfig+0x2a>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e035      	b.n	8000fd6 <HAL_ADC_AnalogWDGConfig+0x96>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	7a1b      	ldrb	r3, [r3, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d108      	bne.n	8000f8c <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	e007      	b.n	8000f9c <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f9a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	6811      	ldr	r1, [r2, #0]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	6852      	ldr	r2, [r2, #4]
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	68d2      	ldr	r2, [r2, #12]
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	6912      	ldr	r2, [r2, #16]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	00800200 	.word	0x00800200
 8000fe4:	00400200 	.word	0x00400200
 8000fe8:	ff3ffde0 	.word	0xff3ffde0

08000fec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d12e      	bne.n	8001064 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001016:	f7ff fce3 	bl	80009e0 <HAL_GetTick>
 800101a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800101c:	e01b      	b.n	8001056 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800101e:	f7ff fcdf 	bl	80009e0 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d914      	bls.n	8001056 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10d      	bne.n	8001056 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	f043 0201 	orr.w	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e007      	b.n	8001066 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	d0dc      	beq.n	800101e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4906      	ldr	r1, [pc, #24]	; (8001118 <__NVIC_EnableIRQ+0x34>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff90 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff2d 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff42 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff90 	bl	8001170 <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5f 	bl	800111c <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff35 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa2 	bl	80011d4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e043      	b.n	800133a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_DMA_Init+0xa8>)
 80012ba:	4413      	add	r3, r2
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <HAL_DMA_Init+0xac>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	009a      	lsls	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_DMA_Init+0xb0>)
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	bffdfff8 	.word	0xbffdfff8
 8001348:	cccccccd 	.word	0xcccccccd
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2204      	movs	r2, #4
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d04f      	beq.n	8001418 <HAL_DMA_IRQHandler+0xc8>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	d04a      	beq.n	8001418 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0204 	bic.w	r2, r2, #4
 800139e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a66      	ldr	r2, [pc, #408]	; (8001540 <HAL_DMA_IRQHandler+0x1f0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d029      	beq.n	80013fe <HAL_DMA_IRQHandler+0xae>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_DMA_IRQHandler+0x1f4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d022      	beq.n	80013fa <HAL_DMA_IRQHandler+0xaa>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a63      	ldr	r2, [pc, #396]	; (8001548 <HAL_DMA_IRQHandler+0x1f8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01a      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xa4>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a62      	ldr	r2, [pc, #392]	; (800154c <HAL_DMA_IRQHandler+0x1fc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d012      	beq.n	80013ee <HAL_DMA_IRQHandler+0x9e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a60      	ldr	r2, [pc, #384]	; (8001550 <HAL_DMA_IRQHandler+0x200>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x98>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <HAL_DMA_IRQHandler+0x204>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d102      	bne.n	80013e2 <HAL_DMA_IRQHandler+0x92>
 80013dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e0:	e00e      	b.n	8001400 <HAL_DMA_IRQHandler+0xb0>
 80013e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013e6:	e00b      	b.n	8001400 <HAL_DMA_IRQHandler+0xb0>
 80013e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013ec:	e008      	b.n	8001400 <HAL_DMA_IRQHandler+0xb0>
 80013ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f2:	e005      	b.n	8001400 <HAL_DMA_IRQHandler+0xb0>
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	e002      	b.n	8001400 <HAL_DMA_IRQHandler+0xb0>
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	e000      	b.n	8001400 <HAL_DMA_IRQHandler+0xb0>
 80013fe:	2304      	movs	r3, #4
 8001400:	4a55      	ldr	r2, [pc, #340]	; (8001558 <HAL_DMA_IRQHandler+0x208>)
 8001402:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8094 	beq.w	8001536 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001416:	e08e      	b.n	8001536 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2202      	movs	r2, #2
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d056      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x186>
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d051      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 020a 	bic.w	r2, r2, #10
 800144e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a38      	ldr	r2, [pc, #224]	; (8001540 <HAL_DMA_IRQHandler+0x1f0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d029      	beq.n	80014b6 <HAL_DMA_IRQHandler+0x166>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a37      	ldr	r2, [pc, #220]	; (8001544 <HAL_DMA_IRQHandler+0x1f4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d022      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x162>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_DMA_IRQHandler+0x1f8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01a      	beq.n	80014ac <HAL_DMA_IRQHandler+0x15c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a34      	ldr	r2, [pc, #208]	; (800154c <HAL_DMA_IRQHandler+0x1fc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d012      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x156>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_DMA_IRQHandler+0x200>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x150>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a31      	ldr	r2, [pc, #196]	; (8001554 <HAL_DMA_IRQHandler+0x204>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d102      	bne.n	800149a <HAL_DMA_IRQHandler+0x14a>
 8001494:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001498:	e00e      	b.n	80014b8 <HAL_DMA_IRQHandler+0x168>
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	e00b      	b.n	80014b8 <HAL_DMA_IRQHandler+0x168>
 80014a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a4:	e008      	b.n	80014b8 <HAL_DMA_IRQHandler+0x168>
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	e005      	b.n	80014b8 <HAL_DMA_IRQHandler+0x168>
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	e002      	b.n	80014b8 <HAL_DMA_IRQHandler+0x168>
 80014b2:	2320      	movs	r3, #32
 80014b4:	e000      	b.n	80014b8 <HAL_DMA_IRQHandler+0x168>
 80014b6:	2302      	movs	r3, #2
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_DMA_IRQHandler+0x208>)
 80014ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d034      	beq.n	8001536 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014d4:	e02f      	b.n	8001536 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	2208      	movs	r2, #8
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d028      	beq.n	8001538 <HAL_DMA_IRQHandler+0x1e8>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	2101      	movs	r1, #1
 800150a:	fa01 f202 	lsl.w	r2, r1, r2
 800150e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
    }
  }
  return;
 8001536:	bf00      	nop
 8001538:	bf00      	nop
}
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40020008 	.word	0x40020008
 8001544:	4002001c 	.word	0x4002001c
 8001548:	40020030 	.word	0x40020030
 800154c:	40020044 	.word	0x40020044
 8001550:	40020058 	.word	0x40020058
 8001554:	4002006c 	.word	0x4002006c
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e169      	b.n	8001844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001570:	2201      	movs	r2, #1
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 8158 	bne.w	800183e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a9a      	ldr	r2, [pc, #616]	; (80017fc <HAL_GPIO_Init+0x2a0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d05e      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 8001598:	4a98      	ldr	r2, [pc, #608]	; (80017fc <HAL_GPIO_Init+0x2a0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d875      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 800159e:	4a98      	ldr	r2, [pc, #608]	; (8001800 <HAL_GPIO_Init+0x2a4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d058      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015a4:	4a96      	ldr	r2, [pc, #600]	; (8001800 <HAL_GPIO_Init+0x2a4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d86f      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015aa:	4a96      	ldr	r2, [pc, #600]	; (8001804 <HAL_GPIO_Init+0x2a8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d052      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015b0:	4a94      	ldr	r2, [pc, #592]	; (8001804 <HAL_GPIO_Init+0x2a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d869      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015b6:	4a94      	ldr	r2, [pc, #592]	; (8001808 <HAL_GPIO_Init+0x2ac>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04c      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015bc:	4a92      	ldr	r2, [pc, #584]	; (8001808 <HAL_GPIO_Init+0x2ac>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d863      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015c2:	4a92      	ldr	r2, [pc, #584]	; (800180c <HAL_GPIO_Init+0x2b0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d046      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015c8:	4a90      	ldr	r2, [pc, #576]	; (800180c <HAL_GPIO_Init+0x2b0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d85d      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d82a      	bhi.n	8001628 <HAL_GPIO_Init+0xcc>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d859      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <HAL_GPIO_Init+0x80>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001631 	.word	0x08001631
 80015e4:	08001643 	.word	0x08001643
 80015e8:	08001685 	.word	0x08001685
 80015ec:	0800168b 	.word	0x0800168b
 80015f0:	0800168b 	.word	0x0800168b
 80015f4:	0800168b 	.word	0x0800168b
 80015f8:	0800168b 	.word	0x0800168b
 80015fc:	0800168b 	.word	0x0800168b
 8001600:	0800168b 	.word	0x0800168b
 8001604:	0800168b 	.word	0x0800168b
 8001608:	0800168b 	.word	0x0800168b
 800160c:	0800168b 	.word	0x0800168b
 8001610:	0800168b 	.word	0x0800168b
 8001614:	0800168b 	.word	0x0800168b
 8001618:	0800168b 	.word	0x0800168b
 800161c:	0800168b 	.word	0x0800168b
 8001620:	08001639 	.word	0x08001639
 8001624:	0800164d 	.word	0x0800164d
 8001628:	4a79      	ldr	r2, [pc, #484]	; (8001810 <HAL_GPIO_Init+0x2b4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162e:	e02c      	b.n	800168a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e029      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	3304      	adds	r3, #4
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e024      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	3308      	adds	r3, #8
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e01f      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	330c      	adds	r3, #12
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e01a      	b.n	800168c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	2304      	movs	r3, #4
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e013      	b.n	800168c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	611a      	str	r2, [r3, #16]
          break;
 8001676:	e009      	b.n	800168c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	615a      	str	r2, [r3, #20]
          break;
 8001682:	e003      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x130>
          break;
 800168a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	d801      	bhi.n	8001696 <HAL_GPIO_Init+0x13a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	e001      	b.n	800169a <HAL_GPIO_Init+0x13e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	; 0xff
 80016a0:	d802      	bhi.n	80016a8 <HAL_GPIO_Init+0x14c>
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x152>
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	3b08      	subs	r3, #8
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	210f      	movs	r1, #15
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80b1 	beq.w	800183e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016dc:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f4:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2bc>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a40      	ldr	r2, [pc, #256]	; (800181c <HAL_GPIO_Init+0x2c0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d013      	beq.n	8001748 <HAL_GPIO_Init+0x1ec>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3f      	ldr	r2, [pc, #252]	; (8001820 <HAL_GPIO_Init+0x2c4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00d      	beq.n	8001744 <HAL_GPIO_Init+0x1e8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3e      	ldr	r2, [pc, #248]	; (8001824 <HAL_GPIO_Init+0x2c8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x1e4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3d      	ldr	r2, [pc, #244]	; (8001828 <HAL_GPIO_Init+0x2cc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_GPIO_Init+0x1e0>
 8001738:	2303      	movs	r3, #3
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 800173c:	2304      	movs	r3, #4
 800173e:	e004      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001740:	2302      	movs	r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001748:	2300      	movs	r3, #0
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	f002 0203 	and.w	r2, r2, #3
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	4093      	lsls	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800175a:	492f      	ldr	r1, [pc, #188]	; (8001818 <HAL_GPIO_Init+0x2bc>)
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_GPIO_Init+0x2d0>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	492c      	ldr	r1, [pc, #176]	; (800182c <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_GPIO_Init+0x2d0>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4928      	ldr	r1, [pc, #160]	; (800182c <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_GPIO_Init+0x2d0>)
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4922      	ldr	r1, [pc, #136]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	491e      	ldr	r1, [pc, #120]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4918      	ldr	r1, [pc, #96]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4914      	ldr	r1, [pc, #80]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d021      	beq.n	8001830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x2e2>
 80017fa:	bf00      	nop
 80017fc:	10320000 	.word	0x10320000
 8001800:	10310000 	.word	0x10310000
 8001804:	10220000 	.word	0x10220000
 8001808:	10210000 	.word	0x10210000
 800180c:	10120000 	.word	0x10120000
 8001810:	10110000 	.word	0x10110000
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000
 800181c:	40010800 	.word	0x40010800
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40011000 	.word	0x40011000
 8001828:	40011400 	.word	0x40011400
 800182c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_GPIO_Init+0x304>)
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	4909      	ldr	r1, [pc, #36]	; (8001860 <HAL_GPIO_Init+0x304>)
 800183a:	4013      	ands	r3, r2
 800183c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	3301      	adds	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f ae8e 	bne.w	8001570 <HAL_GPIO_Init+0x14>
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	372c      	adds	r7, #44	; 0x2c
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af06      	add	r7, sp, #24
 800189a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0fd      	b.n	8001aa2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f007 fca2 	bl	8009204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f8ba 	bl	8004a46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	687e      	ldr	r6, [r7, #4]
 80018da:	466d      	mov	r5, sp
 80018dc:	f106 0410 	add.w	r4, r6, #16
 80018e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	602b      	str	r3, [r5, #0]
 80018e8:	1d33      	adds	r3, r6, #4
 80018ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f003 f884 	bl	80049fa <USB_CoreInit>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ce      	b.n	8001aa2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f8b5 	bl	8004a7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e04c      	b.n	80019b0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	3301      	adds	r3, #1
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	b298      	uxth	r0, r3
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3336      	adds	r3, #54	; 0x36
 8001954:	4602      	mov	r2, r0
 8001956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	3303      	adds	r3, #3
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	333c      	adds	r3, #60	; 0x3c
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3340      	adds	r3, #64	; 0x40
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3ad      	bcc.n	8001916 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e044      	b.n	8001a4a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	3301      	adds	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3b5      	bcc.n	80019c0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	687e      	ldr	r6, [r7, #4]
 8001a5c:	466d      	mov	r5, sp
 8001a5e:	f106 0410 	add.w	r4, r6, #16
 8001a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	602b      	str	r3, [r5, #0]
 8001a6a:	1d33      	adds	r3, r6, #4
 8001a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f003 f80f 	bl	8004a92 <USB_DevInit>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00d      	b.n	8001aa2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 f981 	bl	8006da2 <USB_DevDisconnect>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aaa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_PCD_Start+0x16>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e016      	b.n	8001aee <HAL_PCD_Start+0x44>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 ffa4 	bl	8004a1a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f007 fe08 	bl	80096ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 f955 	bl	8006d8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 f957 	bl	8006db6 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b12:	d102      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fb61 	bl	80021dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 f949 	bl	8006db6 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d112      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b42:	b292      	uxth	r2, r2
 8001b44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f007 fbd6 	bl	80092fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f925 	bl	8001da0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 f92b 	bl	8006db6 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b6a:	d10b      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f005 f914 	bl	8006db6 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	d10b      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bac:	b292      	uxth	r2, r2
 8001bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 f8fd 	bl	8006db6 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc6:	d126      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0204 	bic.w	r2, r2, #4
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0208 	bic.w	r2, r2, #8
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f007 fbb7 	bl	800936c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c10:	b292      	uxth	r2, r2
 8001c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f005 f8cb 	bl	8006db6 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c2a:	f040 8084 	bne.w	8001d36 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	77fb      	strb	r3, [r7, #31]
 8001c32:	e011      	b.n	8001c58 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	8812      	ldrh	r2, [r2, #0]
 8001c44:	b292      	uxth	r2, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	f107 0120 	add.w	r1, r7, #32
 8001c4c:	440b      	add	r3, r1
 8001c4e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	3301      	adds	r3, #1
 8001c56:	77fb      	strb	r3, [r7, #31]
 8001c58:	7ffb      	ldrb	r3, [r7, #31]
 8001c5a:	2b07      	cmp	r3, #7
 8001c5c:	d9ea      	bls.n	8001c34 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c8e:	bf00      	nop
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f6      	beq.n	8001c90 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	77fb      	strb	r3, [r7, #31]
 8001cbe:	e010      	b.n	8001ce2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001cc0:	7ffb      	ldrb	r3, [r7, #31]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	7ffa      	ldrb	r2, [r7, #31]
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	440a      	add	r2, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	f107 0120 	add.w	r1, r7, #32
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001cda:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	77fb      	strb	r3, [r7, #31]
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b07      	cmp	r3, #7
 8001ce6:	d9eb      	bls.n	8001cc0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0208 	orr.w	r2, r2, #8
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d12:	b292      	uxth	r2, r2
 8001d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0204 	orr.w	r2, r2, #4
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f007 fb01 	bl	8009338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f83b 	bl	8006db6 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4a:	d10e      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f007 faba 	bl	80092de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f005 f821 	bl	8006db6 <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d7e:	d10b      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d92:	b292      	uxth	r2, r2
 8001d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_PCD_SetAddress+0x1a>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e013      	b.n	8001de2 <HAL_PCD_SetAddress+0x42>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 ffc8 	bl	8006d68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	4608      	mov	r0, r1
 8001df4:	4611      	mov	r1, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	70fb      	strb	r3, [r7, #3]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	803b      	strh	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da0e      	bge.n	8001e2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	705a      	strb	r2, [r3, #1]
 8001e2c:	e00e      	b.n	8001e4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 0207 	and.w	r2, r3, #7
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e58:	883a      	ldrh	r2, [r7, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	78ba      	ldrb	r2, [r7, #2]
 8001e62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e76:	78bb      	ldrb	r3, [r7, #2]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d102      	bne.n	8001e82 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_PCD_EP_Open+0xa6>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e00e      	b.n	8001eae <HAL_PCD_EP_Open+0xc4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fe18 	bl	8004ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001eac:	7afb      	ldrb	r3, [r7, #11]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da0e      	bge.n	8001ee8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00e      	b.n	8001f06 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 0207 	and.w	r2, r3, #7
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_EP_Close+0x6a>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e00e      	b.n	8001f3e <HAL_PCD_EP_Close+0x88>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 f93a 	bl	80051a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	460b      	mov	r3, r1
 8001f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	f003 0207 	and.w	r2, r3, #7
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2200      	movs	r2, #0
 8001f84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 faec 	bl	8005580 <USB_EPStartXfer>
 8001fa8:	e005      	b.n	8001fb6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6979      	ldr	r1, [r7, #20]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fae5 	bl	8005580 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 0207 	and.w	r2, r3, #7
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2201      	movs	r2, #1
 8002038:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	b2da      	uxtb	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fa92 	bl	8005580 <USB_EPStartXfer>
 800205c:	e005      	b.n	800206a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6979      	ldr	r1, [r7, #20]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fa8b 	bl	8005580 <USB_EPStartXfer>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0207 	and.w	r2, r3, #7
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	d901      	bls.n	8002092 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04c      	b.n	800212c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	da0e      	bge.n	80020b8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
 80020b6:	e00c      	b.n	80020d2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_EP_SetStall+0x7e>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e01c      	b.n	800212c <HAL_PCD_EP_SetStall+0xb8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fd34 	bl	8006b6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	2b00      	cmp	r3, #0
 800210e:	d108      	bne.n	8002122 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f004 fe59 	bl	8006dd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d901      	bls.n	8002152 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e040      	b.n	80021d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da0e      	bge.n	8002178 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00e      	b.n	8002196 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_PCD_EP_ClrStall+0x82>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e00e      	b.n	80021d4 <HAL_PCD_EP_ClrStall+0xa0>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 fd22 	bl	8006c0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021e4:	e2ec      	b.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 8161 	bne.w	80024c8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d152      	bne.n	80022b6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002220:	81fb      	strh	r3, [r7, #14]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002230:	b29b      	uxth	r3, r3
 8002232:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3328      	adds	r3, #40	; 0x28
 8002238:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	3302      	adds	r3, #2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	441a      	add	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002274:	2100      	movs	r1, #0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f007 f817 	bl	80092aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 829b 	beq.w	80027c0 <PCD_EP_ISR_Handler+0x5e4>
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8296 	bne.w	80027c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b292      	uxth	r2, r2
 80022a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022b4:	e284      	b.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d034      	beq.n	800233a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	3306      	adds	r3, #6
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800230e:	b29b      	uxth	r3, r3
 8002310:	f004 fdb0 	bl	8006e74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002320:	4013      	ands	r3, r2
 8002322:	823b      	strh	r3, [r7, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	8a3a      	ldrh	r2, [r7, #16]
 800232a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800232e:	b292      	uxth	r2, r2
 8002330:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f006 ff8c 	bl	8009250 <HAL_PCD_SetupStageCallback>
 8002338:	e242      	b.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800233a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800233e:	2b00      	cmp	r3, #0
 8002340:	f280 823e 	bge.w	80027c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002350:	4013      	ands	r3, r2
 8002352:	83bb      	strh	r3, [r7, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	8bba      	ldrh	r2, [r7, #28]
 800235a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800235e:	b292      	uxth	r2, r2
 8002360:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	3306      	adds	r3, #6
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	4413      	add	r3, r2
 8002380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <PCD_EP_ISR_Handler+0x1ee>
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	6959      	ldr	r1, [r3, #20]
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f004 fd60 	bl	8006e74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	441a      	add	r2, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023c2:	2100      	movs	r1, #0
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f006 ff55 	bl	8009274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 81f2 	bne.w	80027c0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4413      	add	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d112      	bne.n	800242a <PCD_EP_ISR_Handler+0x24e>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800240e:	b29a      	uxth	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002422:	b29a      	uxth	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	e02f      	b.n	800248a <PCD_EP_ISR_Handler+0x2ae>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b3e      	cmp	r3, #62	; 0x3e
 8002430:	d813      	bhi.n	800245a <PCD_EP_ISR_Handler+0x27e>
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <PCD_EP_ISR_Handler+0x270>
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	3301      	adds	r3, #1
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	b29b      	uxth	r3, r3
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	b29a      	uxth	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e017      	b.n	800248a <PCD_EP_ISR_Handler+0x2ae>
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <PCD_EP_ISR_Handler+0x298>
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	3b01      	subs	r3, #1
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	b29b      	uxth	r3, r3
 8002478:	029b      	lsls	r3, r3, #10
 800247a:	b29b      	uxth	r3, r3
 800247c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002484:	b29a      	uxth	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	827b      	strh	r3, [r7, #18]
 800249c:	8a7b      	ldrh	r3, [r7, #18]
 800249e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024a2:	827b      	strh	r3, [r7, #18]
 80024a4:	8a7b      	ldrh	r3, [r7, #18]
 80024a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024aa:	827b      	strh	r3, [r7, #18]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	8a7b      	ldrh	r3, [r7, #18]
 80024b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]
 80024c6:	e17b      	b.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f280 80ea 	bge.w	80026b8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024fa:	4013      	ands	r3, r2
 80024fc:	853b      	strh	r3, [r7, #40]	; 0x28
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800250e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002512:	b292      	uxth	r2, r2
 8002514:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002516:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d122      	bne.n	800257a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	3306      	adds	r3, #6
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800255e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8087 	beq.w	8002674 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	6959      	ldr	r1, [r3, #20]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	88da      	ldrh	r2, [r3, #6]
 8002572:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002574:	f004 fc7e 	bl	8006e74 <USB_ReadPMA>
 8002578:	e07c      	b.n	8002674 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	78db      	ldrb	r3, [r3, #3]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d108      	bne.n	8002594 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002584:	461a      	mov	r2, r3
 8002586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f927 	bl	80027dc <HAL_PCD_EP_DB_Receive>
 800258e:	4603      	mov	r3, r0
 8002590:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002592:	e06f      	b.n	8002674 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d021      	beq.n	8002632 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	3302      	adds	r3, #2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002616:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002618:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02a      	beq.n	8002674 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	6959      	ldr	r1, [r3, #20]
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	891a      	ldrh	r2, [r3, #8]
 800262a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262c:	f004 fc22 	bl	8006e74 <USB_ReadPMA>
 8002630:	e020      	b.n	8002674 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	3306      	adds	r3, #6
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800265c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	6959      	ldr	r1, [r3, #20]
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	895a      	ldrh	r2, [r3, #10]
 800266e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002670:	f004 fc00 	bl	8006e74 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267a:	441a      	add	r2, r3
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002686:	441a      	add	r2, r3
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <PCD_EP_ISR_Handler+0x4c2>
 8002694:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	429a      	cmp	r2, r3
 800269c:	d206      	bcs.n	80026ac <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f006 fde5 	bl	8009274 <HAL_PCD_DataOutStageCallback>
 80026aa:	e005      	b.n	80026b8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 ff64 	bl	8005580 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d07e      	beq.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80026c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f0:	843b      	strh	r3, [r7, #32]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	8c3b      	ldrh	r3, [r7, #32]
 8002702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270a:	b29b      	uxth	r3, r3
 800270c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	78db      	ldrb	r3, [r3, #3]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d00c      	beq.n	8002730 <PCD_EP_ISR_Handler+0x554>
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	78db      	ldrb	r3, [r3, #3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002722:	2b02      	cmp	r3, #2
 8002724:	d146      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002726:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d141      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	3302      	adds	r3, #2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	8bfb      	ldrh	r3, [r7, #30]
 8002760:	429a      	cmp	r2, r3
 8002762:	d906      	bls.n	8002772 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	8bfb      	ldrh	r3, [r7, #30]
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	619a      	str	r2, [r3, #24]
 8002770:	e002      	b.n	8002778 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f006 fd8f 	bl	80092aa <HAL_PCD_DataInStageCallback>
 800278c:	e018      	b.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	8bfb      	ldrh	r3, [r7, #30]
 8002794:	441a      	add	r2, r3
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	8bfb      	ldrh	r3, [r7, #30]
 80027a0:	441a      	add	r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 fee7 	bl	8005580 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027b2:	e005      	b.n	80027c0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027b6:	461a      	mov	r2, r3
 80027b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f91b 	bl	80029f6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f6ff ad0a 	blt.w	80021e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3738      	adds	r7, #56	; 0x38
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d07e      	beq.n	80028f2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	3302      	adds	r3, #2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	8b7b      	ldrh	r3, [r7, #26]
 8002824:	429a      	cmp	r2, r3
 8002826:	d306      	bcc.n	8002836 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	8b7b      	ldrh	r3, [r7, #26]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	e002      	b.n	800283c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d123      	bne.n	800288c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	833b      	strh	r3, [r7, #24]
 8002860:	8b3b      	ldrh	r3, [r7, #24]
 8002862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002866:	833b      	strh	r3, [r7, #24]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	8b3b      	ldrh	r3, [r7, #24]
 8002878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800287c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	b29b      	uxth	r3, r3
 800288a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01f      	beq.n	80028d6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b0:	82fb      	strh	r3, [r7, #22]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	8afb      	ldrh	r3, [r7, #22]
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028d6:	8b7b      	ldrh	r3, [r7, #26]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8087 	beq.w	80029ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6959      	ldr	r1, [r3, #20]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	891a      	ldrh	r2, [r3, #8]
 80028ea:	8b7b      	ldrh	r3, [r7, #26]
 80028ec:	f004 fac2 	bl	8006e74 <USB_ReadPMA>
 80028f0:	e07c      	b.n	80029ec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	3306      	adds	r3, #6
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4413      	add	r3, r2
 8002910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	8b7b      	ldrh	r3, [r7, #26]
 8002922:	429a      	cmp	r2, r3
 8002924:	d306      	bcc.n	8002934 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	8b7b      	ldrh	r3, [r7, #26]
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	e002      	b.n	800293a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d123      	bne.n	800298a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	83fb      	strh	r3, [r7, #30]
 800295e:	8bfb      	ldrh	r3, [r7, #30]
 8002960:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002964:	83fb      	strh	r3, [r7, #30]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	441a      	add	r2, r3
 8002974:	8bfb      	ldrh	r3, [r7, #30]
 8002976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002986:	b29b      	uxth	r3, r3
 8002988:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11f      	bne.n	80029d4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	83bb      	strh	r3, [r7, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	8bbb      	ldrh	r3, [r7, #28]
 80029c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029d4:	8b7b      	ldrh	r3, [r7, #26]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	895a      	ldrh	r2, [r3, #10]
 80029e6:	8b7b      	ldrh	r3, [r7, #26]
 80029e8:	f004 fa44 	bl	8006e74 <USB_ReadPMA>
    }
  }

  return count;
 80029ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b0a2      	sub	sp, #136	; 0x88
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	4613      	mov	r3, r2
 8002a02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 81c7 	beq.w	8002d9e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	3302      	adds	r3, #2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d907      	bls.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	619a      	str	r2, [r3, #24]
 8002a56:	e002      	b.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 80b9 	bne.w	8002bda <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d126      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	4413      	add	r3, r2
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	011a      	lsls	r2, r3, #4
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	4413      	add	r3, r2
 8002a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	801a      	strh	r2, [r3, #0]
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	801a      	strh	r2, [r3, #0]
 8002abc:	e01a      	b.n	8002af4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d116      	bne.n	8002af4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	4413      	add	r3, r2
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	011a      	lsls	r2, r3, #4
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	2200      	movs	r2, #0
 8002af2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d126      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	011a      	lsls	r2, r3, #4
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4413      	add	r3, r2
 8002b24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	e017      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d113      	bne.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	4413      	add	r3, r2
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	011a      	lsls	r2, r3, #4
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	4413      	add	r3, r2
 8002b74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4619      	mov	r1, r3
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f006 fb8f 	bl	80092aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 82d4 	beq.w	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	827b      	strh	r3, [r7, #18]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	8a7b      	ldrh	r3, [r7, #18]
 8002bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	8013      	strh	r3, [r2, #0]
 8002bd8:	e2b2      	b.n	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d021      	beq.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 8286 	bne.w	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c4a:	441a      	add	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d309      	bcc.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	621a      	str	r2, [r3, #32]
 8002c6e:	e015      	b.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002c78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c86:	e009      	b.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d155      	bne.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	4413      	add	r3, r2
 8002cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	011a      	lsls	r2, r3, #4
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
 8002ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d112      	bne.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x302>
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	801a      	strh	r2, [r3, #0]
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e047      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x392>
 8002cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8002cfc:	d811      	bhi.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	3301      	adds	r3, #1
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	029b      	lsls	r3, r3, #10
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e032      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_EP_DB_Transmit+0x342>
 8002d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d34:	3b01      	subs	r3, #1
 8002d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	029b      	lsls	r3, r3, #10
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	e01b      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d117      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6c:	4413      	add	r3, r2
 8002d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	011a      	lsls	r2, r3, #4
 8002d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d78:	4413      	add	r3, r2
 8002d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6959      	ldr	r1, [r3, #20]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	891a      	ldrh	r2, [r3, #8]
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f004 f827 	bl	8006dea <USB_WritePMA>
 8002d9c:	e1d0      	b.n	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	3306      	adds	r3, #6
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d307      	bcc.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	619a      	str	r2, [r3, #24]
 8002de4:	e002      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 80c4 	bne.w	8002f7e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d126      	bne.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x456>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	4413      	add	r3, r2
 8002e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	011a      	lsls	r2, r3, #4
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	4413      	add	r3, r2
 8002e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	e01a      	b.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d116      	bne.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e68:	4413      	add	r3, r2
 8002e6a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	011a      	lsls	r2, r3, #4
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	4413      	add	r3, r2
 8002e76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e7e:	2200      	movs	r2, #0
 8002e80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12f      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	011a      	lsls	r2, r3, #4
 8002eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb8:	4413      	add	r3, r2
 8002eba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e017      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	785b      	ldrb	r3, [r3, #1]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d113      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f06:	4413      	add	r3, r2
 8002f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	011a      	lsls	r2, r3, #4
 8002f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f006 f9bf 	bl	80092aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 8104 	bne.w	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8013      	strh	r3, [r2, #0]
 8002f7c:	e0e0      	b.n	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d121      	bne.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 80b4 	bne.w	8003140 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fee:	441a      	add	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d309      	bcc.n	8003014 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300c:	1ad2      	subs	r2, r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	621a      	str	r2, [r3, #32]
 8003012:	e015      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800301c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003020:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800302a:	e009      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	667b      	str	r3, [r7, #100]	; 0x64
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d155      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x704>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003062:	4413      	add	r3, r2
 8003064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	011a      	lsls	r2, r3, #4
 800306c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306e:	4413      	add	r3, r2
 8003070:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003074:	65bb      	str	r3, [r7, #88]	; 0x58
 8003076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d112      	bne.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800307c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003086:	b29a      	uxth	r2, r3
 8003088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309a:	b29a      	uxth	r2, r3
 800309c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	e044      	b.n	800312c <HAL_PCD_EP_DB_Transmit+0x736>
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	2b3e      	cmp	r3, #62	; 0x3e
 80030a6:	d811      	bhi.n	80030cc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ba:	3301      	adds	r3, #1
 80030bc:	657b      	str	r3, [r7, #84]	; 0x54
 80030be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e02f      	b.n	800312c <HAL_PCD_EP_DB_Transmit+0x736>
 80030cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	657b      	str	r3, [r7, #84]	; 0x54
 80030d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	3b01      	subs	r3, #1
 80030e0:	657b      	str	r3, [r7, #84]	; 0x54
 80030e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e018      	b.n	800312c <HAL_PCD_EP_DB_Transmit+0x736>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d114      	bne.n	800312c <HAL_PCD_EP_DB_Transmit+0x736>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003110:	4413      	add	r3, r2
 8003112:	667b      	str	r3, [r7, #100]	; 0x64
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800311c:	4413      	add	r3, r2
 800311e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003122:	663b      	str	r3, [r7, #96]	; 0x60
 8003124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003126:	b29a      	uxth	r2, r3
 8003128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6959      	ldr	r1, [r3, #20]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	895a      	ldrh	r2, [r3, #10]
 8003138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 fe55 	bl	8006dea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315a:	823b      	strh	r3, [r7, #16]
 800315c:	8a3b      	ldrh	r3, [r7, #16]
 800315e:	f083 0310 	eor.w	r3, r3, #16
 8003162:	823b      	strh	r3, [r7, #16]
 8003164:	8a3b      	ldrh	r3, [r7, #16]
 8003166:	f083 0320 	eor.w	r3, r3, #32
 800316a:	823b      	strh	r3, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	441a      	add	r2, r3
 800317a:	8a3b      	ldrh	r3, [r7, #16]
 800317c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318c:	b29b      	uxth	r3, r3
 800318e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3788      	adds	r7, #136	; 0x88
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800319a:	b480      	push	{r7}
 800319c:	b087      	sub	sp, #28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
 80031a8:	4613      	mov	r3, r2
 80031aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e009      	b.n	80031e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031d0:	897a      	ldrh	r2, [r7, #10]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2200      	movs	r2, #0
 80031ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	80da      	strh	r2, [r3, #6]
 80031f8:	e00b      	b.n	8003212 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2201      	movs	r2, #1
 80031fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	b29a      	uxth	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	b29a      	uxth	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e26c      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8087 	beq.w	800334e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00c      	beq.n	8003266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d112      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
 8003258:	4b8c      	ldr	r3, [pc, #560]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d10b      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06c      	beq.n	800334c <HAL_RCC_OscConfig+0x12c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d168      	bne.n	800334c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e246      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x76>
 8003288:	4b80      	ldr	r3, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7f      	ldr	r2, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e02e      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x98>
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0xbc>
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6e      	ldr	r2, [pc, #440]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a67      	ldr	r2, [pc, #412]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd fb70 	bl	80009e0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fd fb6c 	bl	80009e0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1fa      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xe4>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fd fb5c 	bl	80009e0 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fd fb58 	bl	80009e0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1e6      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x10c>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
 8003372:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1ba      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4939      	ldr	r1, [pc, #228]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fd fb11 	bl	80009e0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fd fb0d 	bl	80009e0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e19b      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4927      	ldr	r1, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd faf0 	bl	80009e0 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7fd faec 	bl	80009e0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e17a      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03a      	beq.n	80034a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343c:	f7fd fad0 	bl	80009e0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7fd facc 	bl	80009e0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e15a      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003462:	2001      	movs	r0, #1
 8003464:	f000 faa6 	bl	80039b4 <RCC_Delay>
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003470:	f7fd fab6 	bl	80009e0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	e00f      	b.n	8003498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7fd fab2 	bl	80009e0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d908      	bls.n	8003498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e140      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	42420000 	.word	0x42420000
 8003494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e9      	bne.n	8003478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a6 	beq.w	80035fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b97      	ldr	r3, [pc, #604]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a93      	ldr	r2, [pc, #588]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b8e      	ldr	r3, [pc, #568]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fd fa73 	bl	80009e0 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fd fa6f 	bl	80009e0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0fd      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b81      	ldr	r3, [pc, #516]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x312>
 8003524:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a7a      	ldr	r2, [pc, #488]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e02d      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x334>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x356>
 800355c:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a6c      	ldr	r2, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a69      	ldr	r2, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003576:	4b67      	ldr	r3, [pc, #412]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a66      	ldr	r2, [pc, #408]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b64      	ldr	r3, [pc, #400]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a63      	ldr	r2, [pc, #396]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fd fa23 	bl	80009e0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fa1f 	bl	80009e0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0ab      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x37e>
 80035c0:	e014      	b.n	80035ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fd fa0d 	bl	80009e0 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fd fa09 	bl	80009e0 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e095      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8081 	beq.w	800370a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d061      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d146      	bne.n	80036aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x4fc>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fd f9dd 	bl	80009e0 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd f9d9 	bl	80009e0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e067      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d108      	bne.n	8003664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003652:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	492d      	ldr	r1, [pc, #180]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a19      	ldr	r1, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	430b      	orrs	r3, r1
 8003676:	4927      	ldr	r1, [pc, #156]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x4fc>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fd f9ad 	bl	80009e0 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7fd f9a9 	bl	80009e0 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e037      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x46a>
 80036a8:	e02f      	b.n	800370a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_RCC_OscConfig+0x4fc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd f996 	bl	80009e0 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd f992 	bl	80009e0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e020      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x498>
 80036d6:	e018      	b.n	800370a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e013      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
 800371c:	42420060 	.word	0x42420060

08003720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d0      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4965      	ldr	r1, [pc, #404]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800379e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	494d      	ldr	r1, [pc, #308]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d040      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d115      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e07f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e073      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4936      	ldr	r1, [pc, #216]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fd f8e6 	bl	80009e0 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fd f8e2 	bl	80009e0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e053      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d210      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0207 	bic.w	r2, r3, #7
 8003856:	4922      	ldr	r1, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e032      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4916      	ldr	r1, [pc, #88]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	490e      	ldr	r1, [pc, #56]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ae:	f000 f821 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	490a      	ldr	r1, [pc, #40]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1cc>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd f844 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08009a88 	.word	0x08009a88
 80038ec:	2000013c 	.word	0x2000013c
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b490      	push	{r4, r7}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038fc:	1d3c      	adds	r4, r7, #4
 80038fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003904:	f240 2301 	movw	r3, #513	; 0x201
 8003908:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b04      	cmp	r3, #4
 800392c:	d002      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x40>
 800392e:	2b08      	cmp	r3, #8
 8003930:	d003      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x46>
 8003932:	e02d      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003936:	623b      	str	r3, [r7, #32]
      break;
 8003938:	e02d      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	0c9b      	lsrs	r3, r3, #18
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003946:	4413      	add	r3, r2
 8003948:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800394c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c5b      	lsrs	r3, r3, #17
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003966:	4413      	add	r3, r2
 8003968:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800396c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003972:	fb02 f203 	mul.w	r2, r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e004      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4a0b      	ldr	r2, [pc, #44]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	623b      	str	r3, [r7, #32]
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003992:	623b      	str	r3, [r7, #32]
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6a3b      	ldr	r3, [r7, #32]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bc90      	pop	{r4, r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	08009a30 	.word	0x08009a30
 80039a8:	40021000 	.word	0x40021000
 80039ac:	007a1200 	.word	0x007a1200
 80039b0:	003d0900 	.word	0x003d0900

080039b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCC_Delay+0x34>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <RCC_Delay+0x38>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0a5b      	lsrs	r3, r3, #9
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039d0:	bf00      	nop
  }
  while (Delay --);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	60fa      	str	r2, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f9      	bne.n	80039d0 <RCC_Delay+0x1c>
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	2000013c 	.word	0x2000013c
 80039ec:	10624dd3 	.word	0x10624dd3

080039f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d07d      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a10:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1c:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4a4b      	ldr	r2, [pc, #300]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a26:	61d3      	str	r3, [r2, #28]
 8003a28:	4b49      	ldr	r3, [pc, #292]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d118      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a44:	4b43      	ldr	r3, [pc, #268]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a50:	f7fc ffc6 	bl	80009e0 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	e008      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fc ffc2 	bl	80009e0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e06d      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02e      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d027      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a94:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9e:	4b2e      	ldr	r3, [pc, #184]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa4:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aaa:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fc ff91 	bl	80009e0 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fc ff8d 	bl	80009e0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ee      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4917      	ldr	r1, [pc, #92]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	490b      	ldr	r1, [pc, #44]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4904      	ldr	r1, [pc, #16]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42420440 	.word	0x42420440

08003b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e041      	b.n	8003bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f005 f976 	bl	8008e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 fbda 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e041      	b.n	8003c90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f839 	bl	8003c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f000 fb8b 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_TIM_PWM_Start+0x24>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e022      	b.n	8003d16 <HAL_TIM_PWM_Start+0x6a>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d109      	bne.n	8003cea <HAL_TIM_PWM_Start+0x3e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	e015      	b.n	8003d16 <HAL_TIM_PWM_Start+0x6a>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d109      	bne.n	8003d04 <HAL_TIM_PWM_Start+0x58>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e008      	b.n	8003d16 <HAL_TIM_PWM_Start+0x6a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e05e      	b.n	8003ddc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_PWM_Start+0x82>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2c:	e013      	b.n	8003d56 <HAL_TIM_PWM_Start+0xaa>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x92>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_PWM_Start+0xaa>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0xa2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4c:	e003      	b.n	8003d56 <HAL_TIM_PWM_Start+0xaa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fd78 	bl	8004854 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_TIM_PWM_Start+0x138>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_TIM_PWM_Start+0x138>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xfa>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xfa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_TIM_PWM_Start+0x13c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xfa>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a12      	ldr	r2, [pc, #72]	; (8003dec <HAL_TIM_PWM_Start+0x140>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d111      	bne.n	8003dca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d010      	beq.n	8003dda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	e007      	b.n	8003dda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800

08003df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e093      	b.n	8003f2c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f005 f849 	bl	8008eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e34:	f023 0307 	bic.w	r3, r3, #7
 8003e38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f000 fa85 	bl	8004354 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	4313      	orrs	r3, r2
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e90:	f023 030c 	bic.w	r3, r3, #12
 8003e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	4313      	orrs	r3, r2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	011a      	lsls	r2, r3, #4
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	031b      	lsls	r3, r3, #12
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4313      	orrs	r3, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d110      	bne.n	8003f86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d102      	bne.n	8003f70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f6a:	7b7b      	ldrb	r3, [r7, #13]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e069      	b.n	8004048 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f84:	e031      	b.n	8003fea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d110      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f8c:	7bbb      	ldrb	r3, [r7, #14]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f92:	7b3b      	ldrb	r3, [r7, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e055      	b.n	8004048 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fac:	e01d      	b.n	8003fea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d108      	bne.n	8003fc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fba:	7b7b      	ldrb	r3, [r7, #13]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d102      	bne.n	8003fc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc0:	7b3b      	ldrb	r3, [r7, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03e      	b.n	8004048 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_TIM_Encoder_Start+0xc4>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d008      	beq.n	8004008 <HAL_TIM_Encoder_Start+0xd4>
 8003ff6:	e00f      	b.n	8004018 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fc27 	bl	8004854 <TIM_CCxChannelCmd>
      break;
 8004006:	e016      	b.n	8004036 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	2104      	movs	r1, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fc1f 	bl	8004854 <TIM_CCxChannelCmd>
      break;
 8004016:	e00e      	b.n	8004036 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2201      	movs	r2, #1
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fc17 	bl	8004854 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	2104      	movs	r1, #4
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fc10 	bl	8004854 <TIM_CCxChannelCmd>
      break;
 8004034:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004066:	2302      	movs	r3, #2
 8004068:	e0ac      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	f200 809f 	bhi.w	80041b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080041b9 	.word	0x080041b9
 8004088:	080041b9 	.word	0x080041b9
 800408c:	080041b9 	.word	0x080041b9
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080041b9 	.word	0x080041b9
 8004098:	080041b9 	.word	0x080041b9
 800409c:	080041b9 	.word	0x080041b9
 80040a0:	08004137 	.word	0x08004137
 80040a4:	080041b9 	.word	0x080041b9
 80040a8:	080041b9 	.word	0x080041b9
 80040ac:	080041b9 	.word	0x080041b9
 80040b0:	08004177 	.word	0x08004177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f9ac 	bl	8004418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
      break;
 80040f2:	e062      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f9f2 	bl	80044e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	619a      	str	r2, [r3, #24]
      break;
 8004134:	e041      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fa3b 	bl	80045b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0208 	orr.w	r2, r2, #8
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e021      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fa85 	bl	800468c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]
      break;
 80041b6:	e000      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIM_ConfigClockSource+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0b3      	b.n	800434c <HAL_TIM_ConfigClockSource+0x180>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421c:	d03e      	beq.n	800429c <HAL_TIM_ConfigClockSource+0xd0>
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	f200 8087 	bhi.w	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	f000 8085 	beq.w	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d87f      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004234:	2b70      	cmp	r3, #112	; 0x70
 8004236:	d01a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0xa2>
 8004238:	2b70      	cmp	r3, #112	; 0x70
 800423a:	d87b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 800423c:	2b60      	cmp	r3, #96	; 0x60
 800423e:	d050      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x116>
 8004240:	2b60      	cmp	r3, #96	; 0x60
 8004242:	d877      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d03c      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0xf6>
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d873      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d058      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x136>
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d86f      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d064      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
 8004258:	2b30      	cmp	r3, #48	; 0x30
 800425a:	d86b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d060      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
 8004260:	2b20      	cmp	r3, #32
 8004262:	d867      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
 8004268:	2b10      	cmp	r3, #16
 800426a:	d05a      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800426c:	e062      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f000 faca 	bl	8004816 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004290:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	609a      	str	r2, [r3, #8]
      break;
 800429a:	e04e      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f000 fab3 	bl	8004816 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042be:	609a      	str	r2, [r3, #8]
      break;
 80042c0:	e03b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fa2a 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2150      	movs	r1, #80	; 0x50
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fa81 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e02b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f000 fa48 	bl	8004784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2160      	movs	r1, #96	; 0x60
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fa71 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 8004300:	e01b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	f000 fa0a 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fa61 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 8004320:	e00b      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f000 fa58 	bl	80047e2 <TIM_ITRx_SetConfig>
        break;
 8004332:	e002      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004334:	bf00      	nop
 8004336:	e000      	b.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004338:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a29      	ldr	r2, [pc, #164]	; (800440c <TIM_Base_SetConfig+0xb8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a26      	ldr	r2, [pc, #152]	; (8004410 <TIM_Base_SetConfig+0xbc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a25      	ldr	r2, [pc, #148]	; (8004414 <TIM_Base_SetConfig+0xc0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1c      	ldr	r2, [pc, #112]	; (800440c <TIM_Base_SetConfig+0xb8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <TIM_Base_SetConfig+0xbc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <TIM_Base_SetConfig+0xc0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a07      	ldr	r2, [pc, #28]	; (800440c <TIM_Base_SetConfig+0xb8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	615a      	str	r2, [r3, #20]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800

08004418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 0302 	bic.w	r3, r3, #2
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_OC1_SetConfig+0xc8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10c      	bne.n	800448e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0308 	bic.w	r3, r3, #8
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 0304 	bic.w	r3, r3, #4
 800448c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <TIM_OC1_SetConfig+0xc8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00

080044e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0210 	bic.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0320 	bic.w	r3, r3, #32
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <TIM_OC2_SetConfig+0xd0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10d      	bne.n	8004560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <TIM_OC2_SetConfig+0xd0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d113      	bne.n	8004590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	40012c00 	.word	0x40012c00

080045b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <TIM_OC3_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10d      	bne.n	8004632 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <TIM_OC3_SetConfig+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d113      	bne.n	8004662 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	621a      	str	r2, [r3, #32]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00

0800468c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0f      	ldr	r2, [pc, #60]	; (8004724 <TIM_OC4_SetConfig+0x98>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d109      	bne.n	8004700 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00

08004728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 030a 	bic.w	r3, r3, #10
 8004764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0210 	bic.w	r2, r3, #16
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	031b      	lsls	r3, r3, #12
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f043 0307 	orr.w	r3, r3, #7
 8004804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	021a      	lsls	r2, r3, #8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	431a      	orrs	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4313      	orrs	r3, r2
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	609a      	str	r2, [r3, #8]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2201      	movs	r2, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	43db      	mvns	r3, r3
 8004876:	401a      	ands	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e046      	b.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d009      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a10      	ldr	r2, [pc, #64]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10c      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4313      	orrs	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800

08004958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004970:	2302      	movs	r3, #2
 8004972:	e03d      	b.n	80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049fa:	b084      	sub	sp, #16
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	f107 0014 	add.w	r0, r7, #20
 8004a08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	b004      	add	sp, #16
 8004a18:	4770      	bx	lr

08004a1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a2a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a4e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4013      	ands	r3, r2
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a92:	b084      	sub	sp, #16
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	f107 0014 	add.w	r0, r7, #20
 8004aa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	b004      	add	sp, #16
 8004ad0:	4770      	bx	lr
	...

08004ad4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b09b      	sub	sp, #108	; 0x6c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d81f      	bhi.n	8004b46 <USB_ActivateEndpoint+0x72>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <USB_ActivateEndpoint+0x38>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b4f 	.word	0x08004b4f
 8004b18:	08004b2b 	.word	0x08004b2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b28:	e012      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b36:	e00b      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b44:	e004      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b4c:	e000      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>
      break;
 8004b4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	7b1b      	ldrb	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8149 	bne.w	8004e54 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8084 	beq.w	8004cd4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	011a      	lsls	r2, r3, #4
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	88db      	ldrh	r3, [r3, #6]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	81fb      	strh	r3, [r7, #14]
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <USB_ActivateEndpoint+0x17c>
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	81bb      	strh	r3, [r7, #12]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	89bb      	ldrh	r3, [r7, #12]
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	78db      	ldrb	r3, [r3, #3]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d020      	beq.n	8004c9a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6e:	813b      	strh	r3, [r7, #8]
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	f083 0320 	eor.w	r3, r3, #32
 8004c76:	813b      	strh	r3, [r7, #8]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	893b      	ldrh	r3, [r7, #8]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
 8004c98:	e27f      	b.n	800519a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	817b      	strh	r3, [r7, #10]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	897b      	ldrh	r3, [r7, #10]
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
 8004cd2:	e262      	b.n	800519a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	4413      	add	r3, r2
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	011a      	lsls	r2, r3, #4
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	88db      	ldrh	r3, [r3, #6]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	4413      	add	r3, r2
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	011a      	lsls	r2, r3, #4
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	4413      	add	r3, r2
 8004d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d112      	bne.n	8004d5a <USB_ActivateEndpoint+0x286>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e02f      	b.n	8004dba <USB_ActivateEndpoint+0x2e6>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d60:	d813      	bhi.n	8004d8a <USB_ActivateEndpoint+0x2b6>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <USB_ActivateEndpoint+0x2a8>
 8004d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d78:	3301      	adds	r3, #1
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e017      	b.n	8004dba <USB_ActivateEndpoint+0x2e6>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	663b      	str	r3, [r7, #96]	; 0x60
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <USB_ActivateEndpoint+0x2d0>
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	3b01      	subs	r3, #1
 8004da2:	663b      	str	r3, [r7, #96]	; 0x60
 8004da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	83fb      	strh	r3, [r7, #30]
 8004dc8:	8bfb      	ldrh	r3, [r7, #30]
 8004dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01b      	beq.n	8004e0a <USB_ActivateEndpoint+0x336>
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	83bb      	strh	r3, [r7, #28]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	8bbb      	ldrh	r3, [r7, #28]
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	837b      	strh	r3, [r7, #26]
 8004e22:	8b7b      	ldrh	r3, [r7, #26]
 8004e24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e28:	837b      	strh	r3, [r7, #26]
 8004e2a:	8b7b      	ldrh	r3, [r7, #26]
 8004e2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e30:	837b      	strh	r3, [r7, #26]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	8b7b      	ldrh	r3, [r7, #26]
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]
 8004e52:	e1a2      	b.n	800519a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea0:	4413      	add	r3, r2
 8004ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	891b      	ldrh	r3, [r3, #8]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed4:	4413      	add	r3, r2
 8004ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	011a      	lsls	r2, r3, #4
 8004ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	895b      	ldrh	r3, [r3, #10]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 8091 	bne.w	8005024 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01b      	beq.n	8004f52 <USB_ActivateEndpoint+0x47e>
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01b      	beq.n	8004fa2 <USB_ActivateEndpoint+0x4ce>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005000:	867b      	strh	r3, [r7, #50]	; 0x32
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]
 8005022:	e0ba      	b.n	800519a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005034:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01d      	beq.n	800507c <USB_ActivateEndpoint+0x5a8>
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	b29b      	uxth	r3, r3
 800507a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800508c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01d      	beq.n	80050d4 <USB_ActivateEndpoint+0x600>
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d024      	beq.n	8005126 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050fa:	f083 0320 	eor.w	r3, r3, #32
 80050fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	b29b      	uxth	r3, r3
 8005122:	8013      	strh	r3, [r2, #0]
 8005124:	e01d      	b.n	8005162 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005196:	b29b      	uxth	r3, r3
 8005198:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800519a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800519e:	4618      	mov	r0, r3
 80051a0:	376c      	adds	r7, #108	; 0x6c
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b08d      	sub	sp, #52	; 0x34
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	7b1b      	ldrb	r3, [r3, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 808e 	bne.w	80052d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d044      	beq.n	800524e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	81bb      	strh	r3, [r7, #12]
 80051d2:	89bb      	ldrh	r3, [r7, #12]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <USB_DeactivateEndpoint+0x6c>
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	817b      	strh	r3, [r7, #10]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005210:	b29b      	uxth	r3, r3
 8005212:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522a:	813b      	strh	r3, [r7, #8]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	893b      	ldrh	r3, [r7, #8]
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
 800524c:	e192      	b.n	8005574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	827b      	strh	r3, [r7, #18]
 800525c:	8a7b      	ldrh	r3, [r7, #18]
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01b      	beq.n	800529e <USB_DeactivateEndpoint+0xf6>
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	823b      	strh	r3, [r7, #16]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	8a3b      	ldrh	r3, [r7, #16]
 800528a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529a:	b29b      	uxth	r3, r3
 800529c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	81fb      	strh	r3, [r7, #14]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	89fb      	ldrh	r3, [r7, #14]
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]
 80052d6:	e14d      	b.n	8005574 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 80a5 	bne.w	800542c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	843b      	strh	r3, [r7, #32]
 80052f0:	8c3b      	ldrh	r3, [r7, #32]
 80052f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01b      	beq.n	8005332 <USB_DeactivateEndpoint+0x18a>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	83fb      	strh	r3, [r7, #30]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	8bfb      	ldrh	r3, [r7, #30]
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	83bb      	strh	r3, [r7, #28]
 8005340:	8bbb      	ldrh	r3, [r7, #28]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01b      	beq.n	8005382 <USB_DeactivateEndpoint+0x1da>
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	837b      	strh	r3, [r7, #26]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	441a      	add	r2, r3
 800536c:	8b7b      	ldrh	r3, [r7, #26]
 800536e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800537e:	b29b      	uxth	r3, r3
 8005380:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	833b      	strh	r3, [r7, #24]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	441a      	add	r2, r3
 80053a4:	8b3b      	ldrh	r3, [r7, #24]
 80053a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	82fb      	strh	r3, [r7, #22]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	441a      	add	r2, r3
 80053dc:	8afb      	ldrh	r3, [r7, #22]
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005408:	82bb      	strh	r3, [r7, #20]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8abb      	ldrh	r3, [r7, #20]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]
 800542a:	e0a3      	b.n	8005574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800543a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800543c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01b      	beq.n	800547c <USB_DeactivateEndpoint+0x2d4>
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	857b      	strh	r3, [r7, #42]	; 0x2a
 800548a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <USB_DeactivateEndpoint+0x324>
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005538:	b29b      	uxth	r3, r3
 800553a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	847b      	strh	r3, [r7, #34]	; 0x22
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	b29b      	uxth	r3, r3
 8005572:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3734      	adds	r7, #52	; 0x34
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b0cc      	sub	sp, #304	; 0x130
 8005584:	af00      	add	r7, sp, #0
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	6018      	str	r0, [r3, #0]
 800558a:	463b      	mov	r3, r7
 800558c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800558e:	463b      	mov	r3, r7
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	f040 872e 	bne.w	80063f6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	463b      	mov	r3, r7
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d905      	bls.n	80055b6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055b4:	e004      	b.n	80055c0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	7b1b      	ldrb	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d134      	bne.n	8005634 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6959      	ldr	r1, [r3, #20]
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	88da      	ldrh	r2, [r3, #6]
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055da:	b29b      	uxth	r3, r3
 80055dc:	1d38      	adds	r0, r7, #4
 80055de:	6800      	ldr	r0, [r0, #0]
 80055e0:	f001 fc03 	bl	8006dea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055e4:	f107 0310 	add.w	r3, r7, #16
 80055e8:	1d3a      	adds	r2, r7, #4
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4619      	mov	r1, r3
 80055fa:	f107 0310 	add.w	r3, r7, #16
 80055fe:	f107 0210 	add.w	r2, r7, #16
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	440a      	add	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	011a      	lsls	r2, r3, #4
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4413      	add	r3, r2
 8005618:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005626:	b29a      	uxth	r2, r3
 8005628:	f107 030c 	add.w	r3, r7, #12
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	f000 beac 	b.w	800638c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	78db      	ldrb	r3, [r3, #3]
 800563a:	2b02      	cmp	r3, #2
 800563c:	f040 838c 	bne.w	8005d58 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	429a      	cmp	r2, r3
 800564e:	f240 8330 	bls.w	8005cb2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	463b      	mov	r3, r7
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800568e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005692:	b29b      	uxth	r3, r3
 8005694:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1a      	ldr	r2, [r3, #32]
 800569c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 819e 	beq.w	8005a00 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056c8:	1d3a      	adds	r2, r7, #4
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d17a      	bne.n	80057ce <USB_EPStartXfer+0x24e>
 80056d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056dc:	1d3a      	adds	r2, r7, #4
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4619      	mov	r1, r3
 80056ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	440a      	add	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4413      	add	r3, r2
 800570c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11a      	bne.n	8005754 <USB_EPStartXfer+0x1d4>
 800571e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800572c:	b29a      	uxth	r2, r3
 800572e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005748:	b29a      	uxth	r2, r3
 800574a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e062      	b.n	800581a <USB_EPStartXfer+0x29a>
 8005754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005758:	2b3e      	cmp	r3, #62	; 0x3e
 800575a:	d819      	bhi.n	8005790 <USB_EPStartXfer+0x210>
 800575c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <USB_EPStartXfer+0x1fc>
 8005772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005776:	3301      	adds	r3, #1
 8005778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800577c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005780:	b29b      	uxth	r3, r3
 8005782:	029b      	lsls	r3, r3, #10
 8005784:	b29a      	uxth	r2, r3
 8005786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e044      	b.n	800581a <USB_EPStartXfer+0x29a>
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <USB_EPStartXfer+0x230>
 80057a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057aa:	3b01      	subs	r3, #1
 80057ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e025      	b.n	800581a <USB_EPStartXfer+0x29a>
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d120      	bne.n	800581a <USB_EPStartXfer+0x29a>
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	440a      	add	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	011a      	lsls	r2, r3, #4
 80057fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4413      	add	r3, r2
 8005802:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	b29a      	uxth	r2, r3
 8005812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	895b      	ldrh	r3, [r3, #10]
 8005820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6959      	ldr	r1, [r3, #20]
 800582a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582e:	b29b      	uxth	r3, r3
 8005830:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005834:	1d38      	adds	r0, r7, #4
 8005836:	6800      	ldr	r0, [r0, #0]
 8005838:	f001 fad7 	bl	8006dea <USB_WritePMA>
            ep->xfer_buff += len;
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005846:	441a      	add	r2, r3
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	463b      	mov	r3, r7
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	d909      	bls.n	8005872 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	463b      	mov	r3, r7
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	621a      	str	r2, [r3, #32]
 8005870:	e008      	b.n	8005884 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005872:	463b      	mov	r3, r7
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800587c:	463b      	mov	r3, r7
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d17a      	bne.n	8005984 <USB_EPStartXfer+0x404>
 800588e:	f107 0318 	add.w	r3, r7, #24
 8005892:	1d3a      	adds	r2, r7, #4
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	4619      	mov	r1, r3
 80058a4:	f107 0318 	add.w	r3, r7, #24
 80058a8:	f107 0218 	add.w	r2, r7, #24
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	440a      	add	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	f107 0318 	add.w	r3, r7, #24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4413      	add	r3, r2
 80058c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11a      	bne.n	800590a <USB_EPStartXfer+0x38a>
 80058d4:	f107 0314 	add.w	r3, r7, #20
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	801a      	strh	r2, [r3, #0]
 8005908:	e067      	b.n	80059da <USB_EPStartXfer+0x45a>
 800590a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590e:	2b3e      	cmp	r3, #62	; 0x3e
 8005910:	d819      	bhi.n	8005946 <USB_EPStartXfer+0x3c6>
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800591c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <USB_EPStartXfer+0x3b2>
 8005928:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800592c:	3301      	adds	r3, #1
 800592e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005932:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005936:	b29b      	uxth	r3, r3
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	b29a      	uxth	r2, r3
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e049      	b.n	80059da <USB_EPStartXfer+0x45a>
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <USB_EPStartXfer+0x3e6>
 800595c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005960:	3b01      	subs	r3, #1
 8005962:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005966:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800596a:	b29b      	uxth	r3, r3
 800596c:	029b      	lsls	r3, r3, #10
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005978:	b29a      	uxth	r2, r3
 800597a:	f107 0314 	add.w	r3, r7, #20
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e02a      	b.n	80059da <USB_EPStartXfer+0x45a>
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d125      	bne.n	80059da <USB_EPStartXfer+0x45a>
 800598e:	f107 0320 	add.w	r3, r7, #32
 8005992:	1d3a      	adds	r2, r7, #4
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	4619      	mov	r1, r3
 80059a4:	f107 0320 	add.w	r3, r7, #32
 80059a8:	f107 0220 	add.w	r2, r7, #32
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	440a      	add	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	463b      	mov	r3, r7
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	011a      	lsls	r2, r3, #4
 80059ba:	f107 0320 	add.w	r3, r7, #32
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4413      	add	r3, r2
 80059c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059c6:	f107 031c 	add.w	r3, r7, #28
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f107 031c 	add.w	r3, r7, #28
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059da:	463b      	mov	r3, r7
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	891b      	ldrh	r3, [r3, #8]
 80059e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e4:	463b      	mov	r3, r7
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6959      	ldr	r1, [r3, #20]
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059f4:	1d38      	adds	r0, r7, #4
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	f001 f9f7 	bl	8006dea <USB_WritePMA>
 80059fc:	f000 bcc6 	b.w	800638c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d164      	bne.n	8005ad4 <USB_EPStartXfer+0x554>
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1e:	4413      	add	r3, r2
 8005a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a32:	647b      	str	r3, [r7, #68]	; 0x44
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d112      	bne.n	8005a62 <USB_EPStartXfer+0x4e2>
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e057      	b.n	8005b12 <USB_EPStartXfer+0x592>
 8005a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a66:	2b3e      	cmp	r3, #62	; 0x3e
 8005a68:	d817      	bhi.n	8005a9a <USB_EPStartXfer+0x51a>
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0x50a>
 8005a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e03b      	b.n	8005b12 <USB_EPStartXfer+0x592>
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <USB_EPStartXfer+0x53a>
 8005ab0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e01e      	b.n	8005b12 <USB_EPStartXfer+0x592>
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d119      	bne.n	8005b12 <USB_EPStartXfer+0x592>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af2:	4413      	add	r3, r2
 8005af4:	653b      	str	r3, [r7, #80]	; 0x50
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b12:	463b      	mov	r3, r7
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	891b      	ldrh	r3, [r3, #8]
 8005b18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6959      	ldr	r1, [r3, #20]
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b2c:	1d38      	adds	r0, r7, #4
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	f001 f95b 	bl	8006dea <USB_WritePMA>
            ep->xfer_buff += len;
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3e:	441a      	add	r2, r3
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b46:	463b      	mov	r3, r7
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d909      	bls.n	8005b6a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	621a      	str	r2, [r3, #32]
 8005b68:	e008      	b.n	8005b7c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b7c:	1d3b      	adds	r3, r7, #4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d164      	bne.n	8005c56 <USB_EPStartXfer+0x6d6>
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b92:	1d3b      	adds	r3, r7, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	4413      	add	r3, r2
 8005ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	011a      	lsls	r2, r3, #4
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d112      	bne.n	8005be4 <USB_EPStartXfer+0x664>
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e054      	b.n	8005c8e <USB_EPStartXfer+0x70e>
 8005be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bea:	d817      	bhi.n	8005c1c <USB_EPStartXfer+0x69c>
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <USB_EPStartXfer+0x68c>
 8005c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c06:	3301      	adds	r3, #1
 8005c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	801a      	strh	r2, [r3, #0]
 8005c1a:	e038      	b.n	8005c8e <USB_EPStartXfer+0x70e>
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <USB_EPStartXfer+0x6bc>
 8005c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c36:	3b01      	subs	r3, #1
 8005c38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e01b      	b.n	8005c8e <USB_EPStartXfer+0x70e>
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d116      	bne.n	8005c8e <USB_EPStartXfer+0x70e>
 8005c60:	1d3b      	adds	r3, r7, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6e:	4413      	add	r3, r2
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	011a      	lsls	r2, r3, #4
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c8e:	463b      	mov	r3, r7
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	895b      	ldrh	r3, [r3, #10]
 8005c94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c98:	463b      	mov	r3, r7
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6959      	ldr	r1, [r3, #20]
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ca8:	1d38      	adds	r0, r7, #4
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	f001 f89d 	bl	8006dea <USB_WritePMA>
 8005cb0:	e36c      	b.n	800638c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005cbc:	1d3b      	adds	r3, r7, #4
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d14:	4413      	add	r3, r2
 8005d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d34:	463b      	mov	r3, r7
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	891b      	ldrh	r3, [r3, #8]
 8005d3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6959      	ldr	r1, [r3, #20]
 8005d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d4e:	1d38      	adds	r0, r7, #4
 8005d50:	6800      	ldr	r0, [r0, #0]
 8005d52:	f001 f84a 	bl	8006dea <USB_WritePMA>
 8005d56:	e319      	b.n	800638c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8162 	beq.w	800608e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d164      	bne.n	8005ea6 <USB_EPStartXfer+0x926>
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005de2:	1d3b      	adds	r3, r7, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df0:	4413      	add	r3, r2
 8005df2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	011a      	lsls	r2, r3, #4
 8005dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dfe:	4413      	add	r3, r2
 8005e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e04:	677b      	str	r3, [r7, #116]	; 0x74
 8005e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d112      	bne.n	8005e34 <USB_EPStartXfer+0x8b4>
 8005e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e057      	b.n	8005ee4 <USB_EPStartXfer+0x964>
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3a:	d817      	bhi.n	8005e6c <USB_EPStartXfer+0x8ec>
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d004      	beq.n	8005e5c <USB_EPStartXfer+0x8dc>
 8005e52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e56:	3301      	adds	r3, #1
 8005e58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	029b      	lsls	r3, r3, #10
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	e03b      	b.n	8005ee4 <USB_EPStartXfer+0x964>
 8005e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <USB_EPStartXfer+0x90c>
 8005e82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	029b      	lsls	r3, r3, #10
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e01e      	b.n	8005ee4 <USB_EPStartXfer+0x964>
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d119      	bne.n	8005ee4 <USB_EPStartXfer+0x964>
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	011a      	lsls	r2, r3, #4
 8005ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ee2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	895b      	ldrh	r3, [r3, #10]
 8005eea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6959      	ldr	r1, [r3, #20]
 8005ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005efe:	1d38      	adds	r0, r7, #4
 8005f00:	6800      	ldr	r0, [r0, #0]
 8005f02:	f000 ff72 	bl	8006dea <USB_WritePMA>
          ep->xfer_buff += len;
 8005f06:	463b      	mov	r3, r7
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695a      	ldr	r2, [r3, #20]
 8005f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f10:	441a      	add	r2, r3
 8005f12:	463b      	mov	r3, r7
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	463b      	mov	r3, r7
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d909      	bls.n	8005f3c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f32:	1ad2      	subs	r2, r2, r3
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	621a      	str	r2, [r3, #32]
 8005f3a:	e008      	b.n	8005f4e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 821a 	beq.w	800638c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d164      	bne.n	800602c <USB_EPStartXfer+0xaac>
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f68:	1d3b      	adds	r3, r7, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f76:	4413      	add	r3, r2
 8005f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f84:	4413      	add	r3, r2
 8005f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d112      	bne.n	8005fba <USB_EPStartXfer+0xa3a>
 8005f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	e057      	b.n	800606a <USB_EPStartXfer+0xaea>
 8005fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005fc0:	d817      	bhi.n	8005ff2 <USB_EPStartXfer+0xa72>
 8005fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <USB_EPStartXfer+0xa62>
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	029b      	lsls	r3, r3, #10
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e03b      	b.n	800606a <USB_EPStartXfer+0xaea>
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <USB_EPStartXfer+0xa92>
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600c:	3b01      	subs	r3, #1
 800600e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006024:	b29a      	uxth	r2, r3
 8006026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e01e      	b.n	800606a <USB_EPStartXfer+0xaea>
 800602c:	463b      	mov	r3, r7
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d119      	bne.n	800606a <USB_EPStartXfer+0xaea>
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	673b      	str	r3, [r7, #112]	; 0x70
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800604a:	4413      	add	r3, r2
 800604c:	673b      	str	r3, [r7, #112]	; 0x70
 800604e:	463b      	mov	r3, r7
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	011a      	lsls	r2, r3, #4
 8006056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006058:	4413      	add	r3, r2
 800605a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800605e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006064:	b29a      	uxth	r2, r3
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	891b      	ldrh	r3, [r3, #8]
 8006070:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6959      	ldr	r1, [r3, #20]
 800607a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800607e:	b29b      	uxth	r3, r3
 8006080:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006084:	1d38      	adds	r0, r7, #4
 8006086:	6800      	ldr	r0, [r0, #0]
 8006088:	f000 feaf 	bl	8006dea <USB_WritePMA>
 800608c:	e17e      	b.n	800638c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800608e:	463b      	mov	r3, r7
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d16f      	bne.n	8006178 <USB_EPStartXfer+0xbf8>
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b0:	4413      	add	r3, r2
 80060b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	011a      	lsls	r2, r3, #4
 80060be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <USB_EPStartXfer+0xb82>
 80060d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e05f      	b.n	80061c2 <USB_EPStartXfer+0xc42>
 8006102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006106:	2b3e      	cmp	r3, #62	; 0x3e
 8006108:	d818      	bhi.n	800613c <USB_EPStartXfer+0xbbc>
 800610a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <USB_EPStartXfer+0xbaa>
 8006120:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006124:	3301      	adds	r3, #1
 8006126:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800612a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800612e:	b29b      	uxth	r3, r3
 8006130:	029b      	lsls	r3, r3, #10
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e042      	b.n	80061c2 <USB_EPStartXfer+0xc42>
 800613c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <USB_EPStartXfer+0xbdc>
 8006152:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006156:	3b01      	subs	r3, #1
 8006158:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800615c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006160:	b29b      	uxth	r3, r3
 8006162:	029b      	lsls	r3, r3, #10
 8006164:	b29b      	uxth	r3, r3
 8006166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e024      	b.n	80061c2 <USB_EPStartXfer+0xc42>
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d11f      	bne.n	80061c2 <USB_EPStartXfer+0xc42>
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006192:	b29b      	uxth	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800619a:	4413      	add	r3, r2
 800619c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	011a      	lsls	r2, r3, #4
 80061a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	891b      	ldrh	r3, [r3, #8]
 80061c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6959      	ldr	r1, [r3, #20]
 80061d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061dc:	1d38      	adds	r0, r7, #4
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	f000 fe03 	bl	8006dea <USB_WritePMA>
          ep->xfer_buff += len;
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ee:	441a      	add	r2, r3
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	429a      	cmp	r2, r3
 8006204:	d909      	bls.n	800621a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006210:	1ad2      	subs	r2, r2, r3
 8006212:	463b      	mov	r3, r7
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	621a      	str	r2, [r3, #32]
 8006218:	e008      	b.n	800622c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800622c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80ab 	beq.w	800638c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d16f      	bne.n	8006328 <USB_EPStartXfer+0xda8>
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006260:	4413      	add	r3, r2
 8006262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	011a      	lsls	r2, r3, #4
 800626e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006272:	4413      	add	r3, r2
 8006274:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800627c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d116      	bne.n	80062b2 <USB_EPStartXfer+0xd32>
 8006284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006290:	b29a      	uxth	r2, r3
 8006292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	e05b      	b.n	800636a <USB_EPStartXfer+0xdea>
 80062b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b6:	2b3e      	cmp	r3, #62	; 0x3e
 80062b8:	d818      	bhi.n	80062ec <USB_EPStartXfer+0xd6c>
 80062ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <USB_EPStartXfer+0xd5a>
 80062d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d4:	3301      	adds	r3, #1
 80062d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062de:	b29b      	uxth	r3, r3
 80062e0:	029b      	lsls	r3, r3, #10
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e03e      	b.n	800636a <USB_EPStartXfer+0xdea>
 80062ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <USB_EPStartXfer+0xd8c>
 8006302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006306:	3b01      	subs	r3, #1
 8006308:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006310:	b29b      	uxth	r3, r3
 8006312:	029b      	lsls	r3, r3, #10
 8006314:	b29b      	uxth	r3, r3
 8006316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631e:	b29a      	uxth	r2, r3
 8006320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e020      	b.n	800636a <USB_EPStartXfer+0xdea>
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d11b      	bne.n	800636a <USB_EPStartXfer+0xdea>
 8006332:	1d3b      	adds	r3, r7, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633a:	b29b      	uxth	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006342:	4413      	add	r3, r2
 8006344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006348:	463b      	mov	r3, r7
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	011a      	lsls	r2, r3, #4
 8006350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006354:	4413      	add	r3, r2
 8006356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800635a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800635e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	895b      	ldrh	r3, [r3, #10]
 8006370:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6959      	ldr	r1, [r3, #20]
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	b29b      	uxth	r3, r3
 8006380:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006384:	1d38      	adds	r0, r7, #4
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	f000 fd2f 	bl	8006dea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f107 020a 	add.w	r2, r7, #10
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063aa:	8013      	strh	r3, [r2, #0]
 80063ac:	f107 030a 	add.w	r3, r7, #10
 80063b0:	f107 020a 	add.w	r2, r7, #10
 80063b4:	8812      	ldrh	r2, [r2, #0]
 80063b6:	f082 0210 	eor.w	r2, r2, #16
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	f107 030a 	add.w	r3, r7, #10
 80063c0:	f107 020a 	add.w	r2, r7, #10
 80063c4:	8812      	ldrh	r2, [r2, #0]
 80063c6:	f082 0220 	eor.w	r2, r2, #32
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	f107 030a 	add.w	r3, r7, #10
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
 80063f4:	e3b5      	b.n	8006b62 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	7b1b      	ldrb	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8090 	bne.w	8006522 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006402:	463b      	mov	r3, r7
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	d90e      	bls.n	8006430 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800641c:	463b      	mov	r3, r7
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	619a      	str	r2, [r3, #24]
 800642e:	e008      	b.n	8006442 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006430:	463b      	mov	r3, r7
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800643a:	463b      	mov	r3, r7
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2200      	movs	r2, #0
 8006440:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800644a:	1d3b      	adds	r3, r7, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800645a:	4413      	add	r3, r2
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800646c:	4413      	add	r3, r2
 800646e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d116      	bne.n	80064ac <USB_EPStartXfer+0xf2c>
 800647e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800648a:	b29a      	uxth	r2, r3
 800648c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e32c      	b.n	8006b06 <USB_EPStartXfer+0x1586>
 80064ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b0:	2b3e      	cmp	r3, #62	; 0x3e
 80064b2:	d818      	bhi.n	80064e6 <USB_EPStartXfer+0xf66>
 80064b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <USB_EPStartXfer+0xf54>
 80064ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ce:	3301      	adds	r3, #1
 80064d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d8:	b29b      	uxth	r3, r3
 80064da:	029b      	lsls	r3, r3, #10
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e30f      	b.n	8006b06 <USB_EPStartXfer+0x1586>
 80064e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <USB_EPStartXfer+0xf86>
 80064fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006500:	3b01      	subs	r3, #1
 8006502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800650a:	b29b      	uxth	r3, r3
 800650c:	029b      	lsls	r3, r3, #10
 800650e:	b29b      	uxth	r3, r3
 8006510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e2f1      	b.n	8006b06 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	78db      	ldrb	r3, [r3, #3]
 8006528:	2b02      	cmp	r3, #2
 800652a:	f040 818f 	bne.w	800684c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800652e:	463b      	mov	r3, r7
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d175      	bne.n	8006624 <USB_EPStartXfer+0x10a4>
 8006538:	1d3b      	adds	r3, r7, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006550:	4413      	add	r3, r2
 8006552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006556:	463b      	mov	r3, r7
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	011a      	lsls	r2, r3, #4
 800655e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006562:	4413      	add	r3, r2
 8006564:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d116      	bne.n	80065a4 <USB_EPStartXfer+0x1024>
 8006576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e065      	b.n	8006670 <USB_EPStartXfer+0x10f0>
 80065a4:	463b      	mov	r3, r7
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b3e      	cmp	r3, #62	; 0x3e
 80065ac:	d81a      	bhi.n	80065e4 <USB_EPStartXfer+0x1064>
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <USB_EPStartXfer+0x1052>
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065cc:	3301      	adds	r3, #1
 80065ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e045      	b.n	8006670 <USB_EPStartXfer+0x10f0>
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <USB_EPStartXfer+0x1088>
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	3b01      	subs	r3, #1
 8006604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e025      	b.n	8006670 <USB_EPStartXfer+0x10f0>
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d120      	bne.n	8006670 <USB_EPStartXfer+0x10f0>
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006646:	4413      	add	r3, r2
 8006648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006658:	4413      	add	r3, r2
 800665a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800665e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d175      	bne.n	800676e <USB_EPStartXfer+0x11ee>
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800669a:	4413      	add	r3, r2
 800669c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	011a      	lsls	r2, r3, #4
 80066a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ac:	4413      	add	r3, r2
 80066ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b6:	463b      	mov	r3, r7
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d116      	bne.n	80066ee <USB_EPStartXfer+0x116e>
 80066c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e061      	b.n	80067b2 <USB_EPStartXfer+0x1232>
 80066ee:	463b      	mov	r3, r7
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b3e      	cmp	r3, #62	; 0x3e
 80066f6:	d81a      	bhi.n	800672e <USB_EPStartXfer+0x11ae>
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <USB_EPStartXfer+0x119c>
 8006712:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006716:	3301      	adds	r3, #1
 8006718:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800671c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006720:	b29b      	uxth	r3, r3
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e041      	b.n	80067b2 <USB_EPStartXfer+0x1232>
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <USB_EPStartXfer+0x11d2>
 8006748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800674c:	3b01      	subs	r3, #1
 800674e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006752:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e021      	b.n	80067b2 <USB_EPStartXfer+0x1232>
 800676e:	463b      	mov	r3, r7
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d11c      	bne.n	80067b2 <USB_EPStartXfer+0x1232>
 8006778:	1d3b      	adds	r3, r7, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006780:	b29b      	uxth	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006788:	4413      	add	r3, r2
 800678a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800678e:	463b      	mov	r3, r7
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	011a      	lsls	r2, r3, #4
 8006796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800679a:	4413      	add	r3, r2
 800679c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067b0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067b2:	463b      	mov	r3, r7
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 81a4 	beq.w	8006b06 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	463b      	mov	r3, r7
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80067d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <USB_EPStartXfer+0x126a>
 80067de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80067ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 8187 	bne.w	8006b06 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 8180 	bne.w	8006b06 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006820:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006824:	1d3b      	adds	r3, r7, #4
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]
 800684a:	e15c      	b.n	8006b06 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b01      	cmp	r3, #1
 8006854:	f040 8155 	bne.w	8006b02 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006858:	463b      	mov	r3, r7
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	463b      	mov	r3, r7
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	429a      	cmp	r2, r3
 8006866:	d90e      	bls.n	8006886 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699a      	ldr	r2, [r3, #24]
 8006878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687c:	1ad2      	subs	r2, r2, r3
 800687e:	463b      	mov	r3, r7
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	619a      	str	r2, [r3, #24]
 8006884:	e008      	b.n	8006898 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2200      	movs	r2, #0
 8006896:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006898:	463b      	mov	r3, r7
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d16f      	bne.n	8006982 <USB_EPStartXfer+0x1402>
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068ba:	4413      	add	r3, r2
 80068bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d116      	bne.n	800690c <USB_EPStartXfer+0x138c>
 80068de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e05f      	b.n	80069cc <USB_EPStartXfer+0x144c>
 800690c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006910:	2b3e      	cmp	r3, #62	; 0x3e
 8006912:	d818      	bhi.n	8006946 <USB_EPStartXfer+0x13c6>
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <USB_EPStartXfer+0x13b4>
 800692a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692e:	3301      	adds	r3, #1
 8006930:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006938:	b29b      	uxth	r3, r3
 800693a:	029b      	lsls	r3, r3, #10
 800693c:	b29a      	uxth	r2, r3
 800693e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e042      	b.n	80069cc <USB_EPStartXfer+0x144c>
 8006946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USB_EPStartXfer+0x13e6>
 800695c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006960:	3b01      	subs	r3, #1
 8006962:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e024      	b.n	80069cc <USB_EPStartXfer+0x144c>
 8006982:	463b      	mov	r3, r7
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d11f      	bne.n	80069cc <USB_EPStartXfer+0x144c>
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	4413      	add	r3, r2
 80069a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069aa:	463b      	mov	r3, r7
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b6:	4413      	add	r3, r2
 80069b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069d4:	463b      	mov	r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d16f      	bne.n	8006abe <USB_EPStartXfer+0x153e>
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f6:	4413      	add	r3, r2
 80069f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	011a      	lsls	r2, r3, #4
 8006a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d116      	bne.n	8006a48 <USB_EPStartXfer+0x14c8>
 8006a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	e05e      	b.n	8006b06 <USB_EPStartXfer+0x1586>
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a4e:	d818      	bhi.n	8006a82 <USB_EPStartXfer+0x1502>
 8006a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <USB_EPStartXfer+0x14f0>
 8006a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	029b      	lsls	r3, r3, #10
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e041      	b.n	8006b06 <USB_EPStartXfer+0x1586>
 8006a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <USB_EPStartXfer+0x1522>
 8006a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	029b      	lsls	r3, r3, #10
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e023      	b.n	8006b06 <USB_EPStartXfer+0x1586>
 8006abe:	463b      	mov	r3, r7
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d11e      	bne.n	8006b06 <USB_EPStartXfer+0x1586>
 8006ac8:	1d3b      	adds	r3, r7, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad8:	4413      	add	r3, r2
 8006ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ade:	463b      	mov	r3, r7
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	011a      	lsls	r2, r3, #4
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e001      	b.n	8006b06 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e02e      	b.n	8006b64 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b06:	1d3b      	adds	r3, r7, #4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b20:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b2c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b38:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b3c:	1d3b      	adds	r3, r7, #4
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	463b      	mov	r3, r7
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d020      	beq.n	8006bc2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b96:	81bb      	strh	r3, [r7, #12]
 8006b98:	89bb      	ldrh	r3, [r7, #12]
 8006b9a:	f083 0310 	eor.w	r3, r3, #16
 8006b9e:	81bb      	strh	r3, [r7, #12]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	89bb      	ldrh	r3, [r7, #12]
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
 8006bc0:	e01f      	b.n	8006c02 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	81fb      	strh	r3, [r7, #14]
 8006bda:	89fb      	ldrh	r3, [r7, #14]
 8006bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be0:	81fb      	strh	r3, [r7, #14]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	441a      	add	r2, r3
 8006bec:	89fb      	ldrh	r3, [r7, #14]
 8006bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b087      	sub	sp, #28
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	7b1b      	ldrb	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 809d 	bne.w	8006d5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d04c      	beq.n	8006cc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	823b      	strh	r3, [r7, #16]
 8006c38:	8a3b      	ldrh	r3, [r7, #16]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01b      	beq.n	8006c7a <USB_EPClearStall+0x6c>
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c58:	81fb      	strh	r3, [r7, #14]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	89fb      	ldrh	r3, [r7, #14]
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	78db      	ldrb	r3, [r3, #3]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d06c      	beq.n	8006d5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c98:	81bb      	strh	r3, [r7, #12]
 8006c9a:	89bb      	ldrh	r3, [r7, #12]
 8006c9c:	f083 0320 	eor.w	r3, r3, #32
 8006ca0:	81bb      	strh	r3, [r7, #12]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	441a      	add	r2, r3
 8006cac:	89bb      	ldrh	r3, [r7, #12]
 8006cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	8013      	strh	r3, [r2, #0]
 8006cc2:	e04b      	b.n	8006d5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	82fb      	strh	r3, [r7, #22]
 8006cd2:	8afb      	ldrh	r3, [r7, #22]
 8006cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01b      	beq.n	8006d14 <USB_EPClearStall+0x106>
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	82bb      	strh	r3, [r7, #20]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	8abb      	ldrh	r3, [r7, #20]
 8006d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	827b      	strh	r3, [r7, #18]
 8006d2c:	8a7b      	ldrh	r3, [r7, #18]
 8006d2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d32:	827b      	strh	r3, [r7, #18]
 8006d34:	8a7b      	ldrh	r3, [r7, #18]
 8006d36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d3a:	827b      	strh	r3, [r7, #18]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	8a7b      	ldrh	r3, [r7, #18]
 8006d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2280      	movs	r2, #128	; 0x80
 8006d7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr

08006dea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b08d      	sub	sp, #52	; 0x34
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	4611      	mov	r1, r2
 8006df6:	461a      	mov	r2, r3
 8006df8:	460b      	mov	r3, r1
 8006dfa:	80fb      	strh	r3, [r7, #6]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e00:	88bb      	ldrh	r3, [r7, #4]
 8006e02:	3301      	adds	r3, #1
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	005a      	lsls	r2, r3, #1
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e22:	e01e      	b.n	8006e62 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	3302      	adds	r3, #2
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	3301      	adds	r3, #1
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1dd      	bne.n	8006e24 <USB_WritePMA+0x3a>
  }
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	3734      	adds	r7, #52	; 0x34
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b08b      	sub	sp, #44	; 0x2c
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4611      	mov	r1, r2
 8006e80:	461a      	mov	r2, r3
 8006e82:	460b      	mov	r3, r1
 8006e84:	80fb      	strh	r3, [r7, #6]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e8a:	88bb      	ldrh	r3, [r7, #4]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	005a      	lsls	r2, r3, #1
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8006eac:	e01b      	b.n	8006ee6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	3302      	adds	r3, #2
 8006eba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	0a1b      	lsrs	r3, r3, #8
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	3302      	adds	r3, #2
 8006ede:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e0      	bne.n	8006eae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006eec:	88bb      	ldrh	r3, [r7, #4]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d007      	beq.n	8006f08 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	701a      	strb	r2, [r3, #0]
  }
}
 8006f08:	bf00      	nop
 8006f0a:	372c      	adds	r7, #44	; 0x2c
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr

08006f12 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7c1b      	ldrb	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d115      	bne.n	8006f56 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f2e:	2202      	movs	r2, #2
 8006f30:	2181      	movs	r1, #129	; 0x81
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f002 fa9d 	bl	8009472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f42:	2202      	movs	r2, #2
 8006f44:	2101      	movs	r1, #1
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f002 fa93 	bl	8009472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006f54:	e012      	b.n	8006f7c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f56:	2340      	movs	r3, #64	; 0x40
 8006f58:	2202      	movs	r2, #2
 8006f5a:	2181      	movs	r1, #129	; 0x81
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f002 fa88 	bl	8009472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f68:	2340      	movs	r3, #64	; 0x40
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f002 fa7f 	bl	8009472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	2203      	movs	r2, #3
 8006f80:	2182      	movs	r1, #130	; 0x82
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f002 fa75 	bl	8009472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f92:	f002 fb95 	bl	80096c0 <USBD_static_malloc>
 8006f96:	4602      	mov	r2, r0
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
 8006fac:	e026      	b.n	8006ffc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7c1b      	ldrb	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f002 fb35 	bl	8009654 <USBD_LL_PrepareReceive>
 8006fea:	e007      	b.n	8006ffc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ff2:	2340      	movs	r3, #64	; 0x40
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f002 fb2c 	bl	8009654 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007016:	2181      	movs	r1, #129	; 0x81
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f002 fa50 	bl	80094be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007024:	2101      	movs	r1, #1
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f002 fa49 	bl	80094be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007034:	2182      	movs	r1, #130	; 0x82
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f002 fa41 	bl	80094be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	4618      	mov	r0, r3
 800705e:	f002 fb3b 	bl	80096d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800709a:	2b00      	cmp	r3, #0
 800709c:	d039      	beq.n	8007112 <USBD_CDC_Setup+0x9e>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d17f      	bne.n	80071a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d029      	beq.n	80070fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da11      	bge.n	80070d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80070c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	88d2      	ldrh	r2, [r2, #6]
 80070c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070c8:	6939      	ldr	r1, [r7, #16]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88db      	ldrh	r3, [r3, #6]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f9da 	bl	800848a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80070d6:	e06b      	b.n	80071b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	785a      	ldrb	r2, [r3, #1]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	88db      	ldrh	r3, [r3, #6]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070ee:	6939      	ldr	r1, [r7, #16]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	88db      	ldrh	r3, [r3, #6]
 80070f4:	461a      	mov	r2, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f9f5 	bl	80084e6 <USBD_CtlPrepareRx>
      break;
 80070fc:	e058      	b.n	80071b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	7850      	ldrb	r0, [r2, #1]
 800710a:	2200      	movs	r2, #0
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4798      	blx	r3
      break;
 8007110:	e04e      	b.n	80071b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	2b0b      	cmp	r3, #11
 8007118:	d02e      	beq.n	8007178 <USBD_CDC_Setup+0x104>
 800711a:	2b0b      	cmp	r3, #11
 800711c:	dc38      	bgt.n	8007190 <USBD_CDC_Setup+0x11c>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <USBD_CDC_Setup+0xb4>
 8007122:	2b0a      	cmp	r3, #10
 8007124:	d014      	beq.n	8007150 <USBD_CDC_Setup+0xdc>
 8007126:	e033      	b.n	8007190 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712e:	2b03      	cmp	r3, #3
 8007130:	d107      	bne.n	8007142 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007132:	f107 030c 	add.w	r3, r7, #12
 8007136:	2202      	movs	r2, #2
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 f9a5 	bl	800848a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007140:	e02e      	b.n	80071a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f936 	bl	80083b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800714a:	2302      	movs	r3, #2
 800714c:	75fb      	strb	r3, [r7, #23]
          break;
 800714e:	e027      	b.n	80071a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007156:	2b03      	cmp	r3, #3
 8007158:	d107      	bne.n	800716a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800715a:	f107 030f 	add.w	r3, r7, #15
 800715e:	2201      	movs	r2, #1
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 f991 	bl	800848a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007168:	e01a      	b.n	80071a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 f922 	bl	80083b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007172:	2302      	movs	r3, #2
 8007174:	75fb      	strb	r3, [r7, #23]
          break;
 8007176:	e013      	b.n	80071a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717e:	2b03      	cmp	r3, #3
 8007180:	d00d      	beq.n	800719e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f916 	bl	80083b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800718a:	2302      	movs	r3, #2
 800718c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800718e:	e006      	b.n	800719e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 f90f 	bl	80083b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007198:	2302      	movs	r3, #2
 800719a:	75fb      	strb	r3, [r7, #23]
          break;
 800719c:	e000      	b.n	80071a0 <USBD_CDC_Setup+0x12c>
          break;
 800719e:	bf00      	nop
      }
      break;
 80071a0:	e006      	b.n	80071b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f906 	bl	80083b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80071aa:	2302      	movs	r3, #2
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	bf00      	nop
  }

  return ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d03a      	beq.n	8007256 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	331c      	adds	r3, #28
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d029      	beq.n	800724a <USBD_CDC_DataIn+0x90>
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	331c      	adds	r3, #28
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	78f9      	ldrb	r1, [r7, #3]
 800720a:	68b8      	ldr	r0, [r7, #8]
 800720c:	460b      	mov	r3, r1
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	440b      	add	r3, r1
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4403      	add	r3, r0
 8007216:	3338      	adds	r3, #56	; 0x38
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	fbb2 f1f3 	udiv	r1, r2, r3
 800721e:	fb03 f301 	mul.w	r3, r3, r1
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d110      	bne.n	800724a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	331c      	adds	r3, #28
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800723c:	78f9      	ldrb	r1, [r7, #3]
 800723e:	2300      	movs	r3, #0
 8007240:	2200      	movs	r2, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f002 f9e3 	bl	800960e <USBD_LL_Transmit>
 8007248:	e003      	b.n	8007252 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f002 fa0e 	bl	800969a <USBD_LL_GetRxDataSize>
 800727e:	4602      	mov	r2, r0
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00d      	beq.n	80072ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80072a4:	4611      	mov	r1, r2
 80072a6:	4798      	blx	r3

    return USBD_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80072ac:	2302      	movs	r3, #2
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <USBD_CDC_EP0_RxReady+0x46>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d010      	beq.n	80072fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80072e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072f0:	b292      	uxth	r2, r2
 80072f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	22ff      	movs	r2, #255	; 0xff
 80072f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2243      	movs	r2, #67	; 0x43
 8007314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007316:	4b03      	ldr	r3, [pc, #12]	; (8007324 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000090 	.word	0x20000090

08007328 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2243      	movs	r2, #67	; 0x43
 8007334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007336:	4b03      	ldr	r3, [pc, #12]	; (8007344 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	2000004c 	.word	0x2000004c

08007348 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2243      	movs	r2, #67	; 0x43
 8007354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007356:	4b03      	ldr	r3, [pc, #12]	; (8007364 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	200000d4 	.word	0x200000d4

08007368 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	220a      	movs	r2, #10
 8007374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007376:	4b03      	ldr	r3, [pc, #12]	; (8007384 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000008 	.word	0x20000008

08007388 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007392:	2302      	movs	r3, #2
 8007394:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr

080073e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7c1b      	ldrb	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007438:	2101      	movs	r1, #1
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f002 f90a 	bl	8009654 <USBD_LL_PrepareReceive>
 8007440:	e007      	b.n	8007452 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007448:	2340      	movs	r3, #64	; 0x40
 800744a:	2101      	movs	r1, #1
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f002 f901 	bl	8009654 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007456:	2302      	movs	r3, #2
  }
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007474:	2302      	movs	r3, #2
 8007476:	e01a      	b.n	80074ae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	79fa      	ldrb	r2, [r7, #7]
 80074a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f001 ff6e 	bl	8009388 <USBD_LL_Init>

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d006      	beq.n	80074d8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
 80074d6:	e001      	b.n	80074dc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80074d8:	2302      	movs	r3, #2
 80074da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 ffa3 	bl	800943c <USBD_LL_Start>

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007520:	2302      	movs	r3, #2
 8007522:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00c      	beq.n	8007548 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	4611      	mov	r1, r2
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fed7 	bl	800833e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d016      	beq.n	80075e2 <USBD_LL_SetupStage+0x6a>
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d81c      	bhi.n	80075f2 <USBD_LL_SetupStage+0x7a>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <USBD_LL_SetupStage+0x4a>
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d008      	beq.n	80075d2 <USBD_LL_SetupStage+0x5a>
 80075c0:	e017      	b.n	80075f2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9ca 	bl	8007964 <USBD_StdDevReq>
      break;
 80075d0:	e01a      	b.n	8007608 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa2c 	bl	8007a38 <USBD_StdItfReq>
      break;
 80075e0:	e012      	b.n	8007608 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa6c 	bl	8007ac8 <USBD_StdEPReq>
      break;
 80075f0:	e00a      	b.n	8007608 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80075f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 ff7b 	bl	80094fc <USBD_LL_StallEP>
      break;
 8007606:	bf00      	nop
  }

  return USBD_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	460b      	mov	r3, r1
 800761c:	607a      	str	r2, [r7, #4]
 800761e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d14b      	bne.n	80076be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800762c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007634:	2b03      	cmp	r3, #3
 8007636:	d134      	bne.n	80076a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d919      	bls.n	8007678 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800765a:	429a      	cmp	r2, r3
 800765c:	d203      	bcs.n	8007666 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007662:	b29b      	uxth	r3, r3
 8007664:	e002      	b.n	800766c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 ff56 	bl	8008522 <USBD_CtlContinueRx>
 8007676:	e038      	b.n	80076ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800768a:	2b03      	cmp	r3, #3
 800768c:	d105      	bne.n	800769a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 ff53 	bl	8008546 <USBD_CtlSendStatus>
 80076a0:	e023      	b.n	80076ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	d11e      	bne.n	80076ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80076b4:	2100      	movs	r1, #0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f001 ff20 	bl	80094fc <USBD_LL_StallEP>
 80076bc:	e015      	b.n	80076ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d108      	bne.n	80076e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	7afa      	ldrb	r2, [r7, #11]
 80076de:	4611      	mov	r1, r2
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	4798      	blx	r3
 80076e4:	e001      	b.n	80076ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e000      	b.n	80076ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	460b      	mov	r3, r1
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d17f      	bne.n	8007808 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3314      	adds	r3, #20
 800770c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007714:	2b02      	cmp	r3, #2
 8007716:	d15c      	bne.n	80077d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	d915      	bls.n	8007750 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	1ad2      	subs	r2, r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	b29b      	uxth	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fec0 	bl	80084c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007742:	2300      	movs	r3, #0
 8007744:	2200      	movs	r2, #0
 8007746:	2100      	movs	r1, #0
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f001 ff83 	bl	8009654 <USBD_LL_PrepareReceive>
 800774e:	e04e      	b.n	80077ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	6912      	ldr	r2, [r2, #16]
 8007758:	fbb3 f1f2 	udiv	r1, r3, r2
 800775c:	fb02 f201 	mul.w	r2, r2, r1
 8007760:	1a9b      	subs	r3, r3, r2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11c      	bne.n	80077a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800776e:	429a      	cmp	r2, r3
 8007770:	d316      	bcc.n	80077a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800777c:	429a      	cmp	r2, r3
 800777e:	d20f      	bcs.n	80077a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fe9c 	bl	80084c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007792:	2300      	movs	r3, #0
 8007794:	2200      	movs	r2, #0
 8007796:	2100      	movs	r1, #0
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f001 ff5b 	bl	8009654 <USBD_LL_PrepareReceive>
 800779e:	e026      	b.n	80077ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d105      	bne.n	80077c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80077c2:	2180      	movs	r1, #128	; 0x80
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f001 fe99 	bl	80094fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fece 	bl	800856c <USBD_CtlReceiveStatus>
 80077d0:	e00d      	b.n	80077ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d004      	beq.n	80077e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f001 fe87 	bl	80094fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d11d      	bne.n	8007834 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff fe81 	bl	8007500 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007806:	e015      	b.n	8007834 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00d      	beq.n	8007830 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800781a:	2b03      	cmp	r3, #3
 800781c:	d108      	bne.n	8007830 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	7afa      	ldrb	r2, [r7, #11]
 8007828:	4611      	mov	r1, r2
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	4798      	blx	r3
 800782e:	e001      	b.n	8007834 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	e000      	b.n	8007836 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007846:	2340      	movs	r3, #64	; 0x40
 8007848:	2200      	movs	r2, #0
 800784a:	2100      	movs	r1, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fe10 	bl	8009472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2240      	movs	r2, #64	; 0x40
 800785e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007862:	2340      	movs	r3, #64	; 0x40
 8007864:	2200      	movs	r2, #0
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fe02 	bl	8009472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2240      	movs	r2, #64	; 0x40
 8007878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6852      	ldr	r2, [r2, #4]
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	4611      	mov	r1, r2
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
  }

  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr

080078de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007914:	2b04      	cmp	r3, #4
 8007916:	d105      	bne.n	8007924 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793e:	2b03      	cmp	r3, #3
 8007940:	d10b      	bne.n	800795a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d005      	beq.n	800798a <USBD_StdDevReq+0x26>
 800797e:	2b40      	cmp	r3, #64	; 0x40
 8007980:	d84f      	bhi.n	8007a22 <USBD_StdDevReq+0xbe>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d009      	beq.n	800799a <USBD_StdDevReq+0x36>
 8007986:	2b20      	cmp	r3, #32
 8007988:	d14b      	bne.n	8007a22 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
      break;
 8007998:	e048      	b.n	8007a2c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d839      	bhi.n	8007a16 <USBD_StdDevReq+0xb2>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <USBD_StdDevReq+0x44>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079f9 	.word	0x080079f9
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	08007a17 	.word	0x08007a17
 80079b4:	08007a03 	.word	0x08007a03
 80079b8:	08007a17 	.word	0x08007a17
 80079bc:	080079db 	.word	0x080079db
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	08007a17 	.word	0x08007a17
 80079c8:	080079ef 	.word	0x080079ef
 80079cc:	080079e5 	.word	0x080079e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9dc 	bl	8007d90 <USBD_GetDescriptor>
          break;
 80079d8:	e022      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fb3f 	bl	8008060 <USBD_SetAddress>
          break;
 80079e2:	e01d      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fb7e 	bl	80080e8 <USBD_SetConfig>
          break;
 80079ec:	e018      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fc07 	bl	8008204 <USBD_GetConfig>
          break;
 80079f6:	e013      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc37 	bl	800826e <USBD_GetStatus>
          break;
 8007a00:	e00e      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fc65 	bl	80082d4 <USBD_SetFeature>
          break;
 8007a0a:	e009      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fc74 	bl	80082fc <USBD_ClrFeature>
          break;
 8007a14:	e004      	b.n	8007a20 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fccc 	bl	80083b6 <USBD_CtlError>
          break;
 8007a1e:	bf00      	nop
      }
      break;
 8007a20:	e004      	b.n	8007a2c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fcc6 	bl	80083b6 <USBD_CtlError>
      break;
 8007a2a:	bf00      	nop
  }

  return ret;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop

08007a38 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4e:	2b40      	cmp	r3, #64	; 0x40
 8007a50:	d005      	beq.n	8007a5e <USBD_StdItfReq+0x26>
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d82e      	bhi.n	8007ab4 <USBD_StdItfReq+0x7c>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <USBD_StdItfReq+0x26>
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d12a      	bne.n	8007ab4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	3b01      	subs	r3, #1
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d81d      	bhi.n	8007aa6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	889b      	ldrh	r3, [r3, #4]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d813      	bhi.n	8007a9c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	88db      	ldrh	r3, [r3, #6]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d110      	bne.n	8007ab0 <USBD_StdItfReq+0x78>
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10d      	bne.n	8007ab0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fd56 	bl	8008546 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a9a:	e009      	b.n	8007ab0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fc89 	bl	80083b6 <USBD_CtlError>
          break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fc84 	bl	80083b6 <USBD_CtlError>
          break;
 8007aae:	e000      	b.n	8007ab2 <USBD_StdItfReq+0x7a>
          break;
 8007ab0:	bf00      	nop
      }
      break;
 8007ab2:	e004      	b.n	8007abe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fc7d 	bl	80083b6 <USBD_CtlError>
      break;
 8007abc:	bf00      	nop
  }

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	889b      	ldrh	r3, [r3, #4]
 8007ada:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d007      	beq.n	8007af8 <USBD_StdEPReq+0x30>
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	f200 8146 	bhi.w	8007d7a <USBD_StdEPReq+0x2b2>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <USBD_StdEPReq+0x40>
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	f040 8141 	bne.w	8007d7a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
      break;
 8007b06:	e13d      	b.n	8007d84 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	d10a      	bne.n	8007b2a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	e12d      	b.n	8007d86 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d007      	beq.n	8007b42 <USBD_StdEPReq+0x7a>
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	f300 811b 	bgt.w	8007d6e <USBD_StdEPReq+0x2a6>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d072      	beq.n	8007c22 <USBD_StdEPReq+0x15a>
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d03a      	beq.n	8007bb6 <USBD_StdEPReq+0xee>
 8007b40:	e115      	b.n	8007d6e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d002      	beq.n	8007b52 <USBD_StdEPReq+0x8a>
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d015      	beq.n	8007b7c <USBD_StdEPReq+0xb4>
 8007b50:	e02b      	b.n	8007baa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <USBD_StdEPReq+0xaa>
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b80      	cmp	r3, #128	; 0x80
 8007b5c:	d009      	beq.n	8007b72 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fcca 	bl	80094fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b68:	2180      	movs	r1, #128	; 0x80
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 fcc6 	bl	80094fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b70:	e020      	b.n	8007bb4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc1e 	bl	80083b6 <USBD_CtlError>
              break;
 8007b7a:	e01b      	b.n	8007bb4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	885b      	ldrh	r3, [r3, #2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10e      	bne.n	8007ba2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <USBD_StdEPReq+0xda>
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d008      	beq.n	8007ba2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	88db      	ldrh	r3, [r3, #6]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 fcad 	bl	80094fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fccf 	bl	8008546 <USBD_CtlSendStatus>

              break;
 8007ba8:	e004      	b.n	8007bb4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fc02 	bl	80083b6 <USBD_CtlError>
              break;
 8007bb2:	bf00      	nop
          }
          break;
 8007bb4:	e0e0      	b.n	8007d78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d002      	beq.n	8007bc6 <USBD_StdEPReq+0xfe>
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d015      	beq.n	8007bf0 <USBD_StdEPReq+0x128>
 8007bc4:	e026      	b.n	8007c14 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <USBD_StdEPReq+0x11e>
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b80      	cmp	r3, #128	; 0x80
 8007bd0:	d009      	beq.n	8007be6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fc90 	bl	80094fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007bdc:	2180      	movs	r1, #128	; 0x80
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fc8c 	bl	80094fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007be4:	e01c      	b.n	8007c20 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fbe4 	bl	80083b6 <USBD_CtlError>
              break;
 8007bee:	e017      	b.n	8007c20 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d112      	bne.n	8007c1e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fc97 	bl	800953a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fc9a 	bl	8008546 <USBD_CtlSendStatus>
              }
              break;
 8007c12:	e004      	b.n	8007c1e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fbcd 	bl	80083b6 <USBD_CtlError>
              break;
 8007c1c:	e000      	b.n	8007c20 <USBD_StdEPReq+0x158>
              break;
 8007c1e:	bf00      	nop
          }
          break;
 8007c20:	e0aa      	b.n	8007d78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d002      	beq.n	8007c32 <USBD_StdEPReq+0x16a>
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d032      	beq.n	8007c96 <USBD_StdEPReq+0x1ce>
 8007c30:	e097      	b.n	8007d62 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <USBD_StdEPReq+0x180>
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b80      	cmp	r3, #128	; 0x80
 8007c3c:	d004      	beq.n	8007c48 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fbb8 	bl	80083b6 <USBD_CtlError>
                break;
 8007c46:	e091      	b.n	8007d6c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da0b      	bge.n	8007c68 <USBD_StdEPReq+0x1a0>
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	3310      	adds	r3, #16
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	3304      	adds	r3, #4
 8007c66:	e00b      	b.n	8007c80 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	3304      	adds	r3, #4
 8007c80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fbfb 	bl	800848a <USBD_CtlSendData>
              break;
 8007c94:	e06a      	b.n	8007d6c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	da11      	bge.n	8007cc2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	f003 020f 	and.w	r2, r3, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d117      	bne.n	8007ce8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fb7b 	bl	80083b6 <USBD_CtlError>
                  break;
 8007cc0:	e054      	b.n	8007d6c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb68 	bl	80083b6 <USBD_CtlError>
                  break;
 8007ce6:	e041      	b.n	8007d6c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da0b      	bge.n	8007d08 <USBD_StdEPReq+0x240>
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	3310      	adds	r3, #16
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	e00b      	b.n	8007d20 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3304      	adds	r3, #4
 8007d20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <USBD_StdEPReq+0x266>
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b80      	cmp	r3, #128	; 0x80
 8007d2c:	d103      	bne.n	8007d36 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e00e      	b.n	8007d54 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 fc1c 	bl	8009578 <USBD_LL_IsStallEP>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	e002      	b.n	8007d54 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2202      	movs	r2, #2
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fb95 	bl	800848a <USBD_CtlSendData>
              break;
 8007d60:	e004      	b.n	8007d6c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb26 	bl	80083b6 <USBD_CtlError>
              break;
 8007d6a:	bf00      	nop
          }
          break;
 8007d6c:	e004      	b.n	8007d78 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fb20 	bl	80083b6 <USBD_CtlError>
          break;
 8007d76:	bf00      	nop
      }
      break;
 8007d78:	e004      	b.n	8007d84 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fb1a 	bl	80083b6 <USBD_CtlError>
      break;
 8007d82:	bf00      	nop
  }

  return ret;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	885b      	ldrh	r3, [r3, #2]
 8007daa:	0a1b      	lsrs	r3, r3, #8
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	2b06      	cmp	r3, #6
 8007db2:	f200 8128 	bhi.w	8008006 <USBD_GetDescriptor+0x276>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <USBD_GetDescriptor+0x2c>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dd9 	.word	0x08007dd9
 8007dc0:	08007df1 	.word	0x08007df1
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08008007 	.word	0x08008007
 8007dcc:	08008007 	.word	0x08008007
 8007dd0:	08007fa7 	.word	0x08007fa7
 8007dd4:	08007fd3 	.word	0x08007fd3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
      break;
 8007dee:	e112      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	7c1b      	ldrb	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10d      	bne.n	8007e14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f107 0208 	add.w	r2, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	2202      	movs	r2, #2
 8007e10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e12:	e100      	b.n	8008016 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	f107 0208 	add.w	r2, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	701a      	strb	r2, [r3, #0]
      break;
 8007e2e:	e0f2      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	885b      	ldrh	r3, [r3, #2]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	f200 80ac 	bhi.w	8007f94 <USBD_GetDescriptor+0x204>
 8007e3c:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <USBD_GetDescriptor+0xb4>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e91 	.word	0x08007e91
 8007e4c:	08007ec5 	.word	0x08007ec5
 8007e50:	08007ef9 	.word	0x08007ef9
 8007e54:	08007f2d 	.word	0x08007f2d
 8007e58:	08007f61 	.word	0x08007f61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7c12      	ldrb	r2, [r2, #16]
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7e:	e091      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa97 	bl	80083b6 <USBD_CtlError>
            err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8e:	e089      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb2:	e077      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa7d 	bl	80083b6 <USBD_CtlError>
            err++;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec2:	e06f      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	7c12      	ldrb	r2, [r2, #16]
 8007edc:	f107 0108 	add.w	r1, r7, #8
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4798      	blx	r3
 8007ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee6:	e05d      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa63 	bl	80083b6 <USBD_CtlError>
            err++;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef6:	e055      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7c12      	ldrb	r2, [r2, #16]
 8007f10:	f107 0108 	add.w	r1, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f1a:	e043      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa49 	bl	80083b6 <USBD_CtlError>
            err++;
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	3301      	adds	r3, #1
 8007f28:	72fb      	strb	r3, [r7, #11]
          break;
 8007f2a:	e03b      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7c12      	ldrb	r2, [r2, #16]
 8007f44:	f107 0108 	add.w	r1, r7, #8
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
 8007f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4e:	e029      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa2f 	bl	80083b6 <USBD_CtlError>
            err++;
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5e:	e021      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	7c12      	ldrb	r2, [r2, #16]
 8007f78:	f107 0108 	add.w	r1, r7, #8
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
 8007f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f82:	e00f      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa15 	bl	80083b6 <USBD_CtlError>
            err++;
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	72fb      	strb	r3, [r7, #11]
          break;
 8007f92:	e007      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa0d 	bl	80083b6 <USBD_CtlError>
          err++;
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007fa2:	e038      	b.n	8008016 <USBD_GetDescriptor+0x286>
 8007fa4:	e037      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	7c1b      	ldrb	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb6:	f107 0208 	add.w	r2, r7, #8
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4798      	blx	r3
 8007fbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fc0:	e029      	b.n	8008016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9f6 	bl	80083b6 <USBD_CtlError>
        err++;
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	72fb      	strb	r3, [r7, #11]
      break;
 8007fd0:	e021      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7c1b      	ldrb	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10d      	bne.n	8007ff6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	f107 0208 	add.w	r2, r7, #8
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4798      	blx	r3
 8007fea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ff4:	e00f      	b.n	8008016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9dc 	bl	80083b6 <USBD_CtlError>
        err++;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	3301      	adds	r3, #1
 8008002:	72fb      	strb	r3, [r7, #11]
      break;
 8008004:	e007      	b.n	8008016 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9d4 	bl	80083b6 <USBD_CtlError>
      err++;
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	3301      	adds	r3, #1
 8008012:	72fb      	strb	r3, [r7, #11]
      break;
 8008014:	bf00      	nop
  }

  if (err != 0U)
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11c      	bne.n	8008056 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800801c:	893b      	ldrh	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d011      	beq.n	8008046 <USBD_GetDescriptor+0x2b6>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00d      	beq.n	8008046 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	88da      	ldrh	r2, [r3, #6]
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	4293      	cmp	r3, r2
 8008032:	bf28      	it	cs
 8008034:	4613      	movcs	r3, r2
 8008036:	b29b      	uxth	r3, r3
 8008038:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800803a:	893b      	ldrh	r3, [r7, #8]
 800803c:	461a      	mov	r2, r3
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fa22 	bl	800848a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa79 	bl	8008546 <USBD_CtlSendStatus>
 8008054:	e000      	b.n	8008058 <USBD_GetDescriptor+0x2c8>
    return;
 8008056:	bf00      	nop
    }
  }
}
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop

08008060 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d130      	bne.n	80080d4 <USBD_SetAddress+0x74>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	88db      	ldrh	r3, [r3, #6]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d12c      	bne.n	80080d4 <USBD_SetAddress+0x74>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	2b7f      	cmp	r3, #127	; 0x7f
 8008080:	d828      	bhi.n	80080d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	2b03      	cmp	r3, #3
 8008096:	d104      	bne.n	80080a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f98b 	bl	80083b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a0:	e01d      	b.n	80080de <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fa8e 	bl	80095d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fa46 	bl	8008546 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c8:	e009      	b.n	80080de <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d2:	e004      	b.n	80080de <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f96d 	bl	80083b6 <USBD_CtlError>
  }
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	885b      	ldrh	r3, [r3, #2]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	4b41      	ldr	r3, [pc, #260]	; (8008200 <USBD_SetConfig+0x118>)
 80080fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080fc:	4b40      	ldr	r3, [pc, #256]	; (8008200 <USBD_SetConfig+0x118>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d904      	bls.n	800810e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f955 	bl	80083b6 <USBD_CtlError>
 800810c:	e075      	b.n	80081fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008114:	2b02      	cmp	r3, #2
 8008116:	d002      	beq.n	800811e <USBD_SetConfig+0x36>
 8008118:	2b03      	cmp	r3, #3
 800811a:	d023      	beq.n	8008164 <USBD_SetConfig+0x7c>
 800811c:	e062      	b.n	80081e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800811e:	4b38      	ldr	r3, [pc, #224]	; (8008200 <USBD_SetConfig+0x118>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01a      	beq.n	800815c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <USBD_SetConfig+0x118>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008138:	4b31      	ldr	r3, [pc, #196]	; (8008200 <USBD_SetConfig+0x118>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff f9e8 	bl	8007514 <USBD_SetClassConfig>
 8008144:	4603      	mov	r3, r0
 8008146:	2b02      	cmp	r3, #2
 8008148:	d104      	bne.n	8008154 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f932 	bl	80083b6 <USBD_CtlError>
            return;
 8008152:	e052      	b.n	80081fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f9f6 	bl	8008546 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800815a:	e04e      	b.n	80081fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f9f2 	bl	8008546 <USBD_CtlSendStatus>
        break;
 8008162:	e04a      	b.n	80081fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008164:	4b26      	ldr	r3, [pc, #152]	; (8008200 <USBD_SetConfig+0x118>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d112      	bne.n	8008192 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008174:	4b22      	ldr	r3, [pc, #136]	; (8008200 <USBD_SetConfig+0x118>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800817e:	4b20      	ldr	r3, [pc, #128]	; (8008200 <USBD_SetConfig+0x118>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff f9e4 	bl	8007552 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9db 	bl	8008546 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008190:	e033      	b.n	80081fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008192:	4b1b      	ldr	r3, [pc, #108]	; (8008200 <USBD_SetConfig+0x118>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d01d      	beq.n	80081dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff f9d2 	bl	8007552 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80081ae:	4b14      	ldr	r3, [pc, #80]	; (8008200 <USBD_SetConfig+0x118>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80081b8:	4b11      	ldr	r3, [pc, #68]	; (8008200 <USBD_SetConfig+0x118>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff f9a8 	bl	8007514 <USBD_SetClassConfig>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d104      	bne.n	80081d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f8f2 	bl	80083b6 <USBD_CtlError>
            return;
 80081d2:	e012      	b.n	80081fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f9b6 	bl	8008546 <USBD_CtlSendStatus>
        break;
 80081da:	e00e      	b.n	80081fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f9b2 	bl	8008546 <USBD_CtlSendStatus>
        break;
 80081e2:	e00a      	b.n	80081fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8e5 	bl	80083b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <USBD_SetConfig+0x118>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff f9ad 	bl	8007552 <USBD_ClrClassConfig>
        break;
 80081f8:	bf00      	nop
    }
  }
}
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	200001bc 	.word	0x200001bc

08008204 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	88db      	ldrh	r3, [r3, #6]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d004      	beq.n	8008220 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f8cc 	bl	80083b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800821e:	e022      	b.n	8008266 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008226:	2b02      	cmp	r3, #2
 8008228:	dc02      	bgt.n	8008230 <USBD_GetConfig+0x2c>
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc03      	bgt.n	8008236 <USBD_GetConfig+0x32>
 800822e:	e015      	b.n	800825c <USBD_GetConfig+0x58>
 8008230:	2b03      	cmp	r3, #3
 8008232:	d00b      	beq.n	800824c <USBD_GetConfig+0x48>
 8008234:	e012      	b.n	800825c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3308      	adds	r3, #8
 8008240:	2201      	movs	r2, #1
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f920 	bl	800848a <USBD_CtlSendData>
        break;
 800824a:	e00c      	b.n	8008266 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3304      	adds	r3, #4
 8008250:	2201      	movs	r2, #1
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f918 	bl	800848a <USBD_CtlSendData>
        break;
 800825a:	e004      	b.n	8008266 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8a9 	bl	80083b6 <USBD_CtlError>
        break;
 8008264:	bf00      	nop
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827e:	3b01      	subs	r3, #1
 8008280:	2b02      	cmp	r3, #2
 8008282:	d81e      	bhi.n	80082c2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	88db      	ldrh	r3, [r3, #6]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d004      	beq.n	8008296 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f891 	bl	80083b6 <USBD_CtlError>
        break;
 8008294:	e01a      	b.n	80082cc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f043 0202 	orr.w	r2, r3, #2
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	330c      	adds	r3, #12
 80082b6:	2202      	movs	r2, #2
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f8e5 	bl	800848a <USBD_CtlSendData>
      break;
 80082c0:	e004      	b.n	80082cc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f876 	bl	80083b6 <USBD_CtlError>
      break;
 80082ca:	bf00      	nop
  }
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d106      	bne.n	80082f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f929 	bl	8008546 <USBD_CtlSendStatus>
  }
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830c:	3b01      	subs	r3, #1
 800830e:	2b02      	cmp	r3, #2
 8008310:	d80b      	bhi.n	800832a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d10c      	bne.n	8008334 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f90f 	bl	8008546 <USBD_CtlSendStatus>
      }
      break;
 8008328:	e004      	b.n	8008334 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f842 	bl	80083b6 <USBD_CtlError>
      break;
 8008332:	e000      	b.n	8008336 <USBD_ClrFeature+0x3a>
      break;
 8008334:	bf00      	nop
  }
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	785a      	ldrb	r2, [r3, #1]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	3302      	adds	r3, #2
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b29a      	uxth	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	3303      	adds	r3, #3
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	b29b      	uxth	r3, r3
 800836c:	4413      	add	r3, r2
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	3304      	adds	r3, #4
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b29a      	uxth	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	3305      	adds	r3, #5
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	4413      	add	r3, r2
 800838a:	b29a      	uxth	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	3306      	adds	r3, #6
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29a      	uxth	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	3307      	adds	r3, #7
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4413      	add	r3, r2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	80da      	strh	r2, [r3, #6]

}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80083c0:	2180      	movs	r1, #128	; 0x80
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 f89a 	bl	80094fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 f896 	bl	80094fc <USBD_LL_StallEP>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d032      	beq.n	8008454 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f834 	bl	800845c <USBD_GetLen>
 80083f4:	4603      	mov	r3, r0
 80083f6:	3301      	adds	r3, #1
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	75fa      	strb	r2, [r7, #23]
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	7812      	ldrb	r2, [r2, #0]
 8008412:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	75fa      	strb	r2, [r7, #23]
 800841a:	461a      	mov	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4413      	add	r3, r2
 8008420:	2203      	movs	r2, #3
 8008422:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008424:	e012      	b.n	800844c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	60fa      	str	r2, [r7, #12]
 800842c:	7dfa      	ldrb	r2, [r7, #23]
 800842e:	1c51      	adds	r1, r2, #1
 8008430:	75f9      	strb	r1, [r7, #23]
 8008432:	4611      	mov	r1, r2
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	440a      	add	r2, r1
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	75fa      	strb	r2, [r7, #23]
 8008442:	461a      	mov	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4413      	add	r3, r2
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e8      	bne.n	8008426 <USBD_GetString+0x4e>
    }
  }
}
 8008454:	bf00      	nop
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008468:	e005      	b.n	8008476 <USBD_GetLen+0x1a>
  {
    len++;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	3301      	adds	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3301      	adds	r3, #1
 8008474:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f5      	bne.n	800846a <USBD_GetLen+0xe>
  }

  return len;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	4613      	mov	r3, r2
 8008496:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2202      	movs	r2, #2
 800849c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	2100      	movs	r1, #0
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f001 f8ab 	bl	800960e <USBD_LL_Transmit>

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	2100      	movs	r1, #0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 f899 	bl	800960e <USBD_LL_Transmit>

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	4613      	mov	r3, r2
 80084f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2203      	movs	r2, #3
 80084f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008504:	88fa      	ldrh	r2, [r7, #6]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	2100      	movs	r1, #0
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f001 f89e 	bl	8009654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	4613      	mov	r3, r2
 800852e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	2100      	movs	r1, #0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f001 f88c 	bl	8009654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2204      	movs	r2, #4
 8008552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 f856 	bl	800960e <USBD_LL_Transmit>

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2205      	movs	r2, #5
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800857c:	2300      	movs	r3, #0
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 f866 	bl	8009654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008596:	b087      	sub	sp, #28
 8008598:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800859a:	f7f8 f9c9 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800859e:	f000 f86f 	bl	8008680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085a2:	f000 fa65 	bl	8008a70 <MX_GPIO_Init>
  MX_TIM1_Init();
 80085a6:	f000 f943 	bl	8008830 <MX_TIM1_Init>
  MX_TIM2_Init();
 80085aa:	f000 f9ef 	bl	800898c <MX_TIM2_Init>
  MX_DMA_Init();
 80085ae:	f000 fa41 	bl	8008a34 <MX_DMA_Init>
  MX_ADC1_Init();
 80085b2:	f000 f8c3 	bl	800873c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80085b6:	f000 fd67 	bl	8009088 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* PID Initialize */
  //PIDInit(&mySpeedPID,1,0,0,0.01,-500,500,AUTOMATIC,DIRECT);
  PIDInit(&myPosPID,posKp,posKi,posKd,sampleTimeSeconds,minOutput,maxOutput,AUTOMATIC,REVERSE);
 80085ba:	4b25      	ldr	r3, [pc, #148]	; (8008650 <main+0xbc>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	4610      	mov	r0, r2
 80085c2:	4619      	mov	r1, r3
 80085c4:	f7f7 ff9e 	bl	8000504 <__aeabi_d2f>
 80085c8:	4604      	mov	r4, r0
 80085ca:	4b22      	ldr	r3, [pc, #136]	; (8008654 <main+0xc0>)
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	4610      	mov	r0, r2
 80085d2:	4619      	mov	r1, r3
 80085d4:	f7f7 ff96 	bl	8000504 <__aeabi_d2f>
 80085d8:	4605      	mov	r5, r0
 80085da:	4b1f      	ldr	r3, [pc, #124]	; (8008658 <main+0xc4>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	4610      	mov	r0, r2
 80085e2:	4619      	mov	r1, r3
 80085e4:	f7f7 ff8e 	bl	8000504 <__aeabi_d2f>
 80085e8:	4b1c      	ldr	r3, [pc, #112]	; (800865c <main+0xc8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <main+0xcc>)
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	491c      	ldr	r1, [pc, #112]	; (8008664 <main+0xd0>)
 80085f2:	6809      	ldr	r1, [r1, #0]
 80085f4:	2601      	movs	r6, #1
 80085f6:	9604      	str	r6, [sp, #16]
 80085f8:	2601      	movs	r6, #1
 80085fa:	9603      	str	r6, [sp, #12]
 80085fc:	9102      	str	r1, [sp, #8]
 80085fe:	9201      	str	r2, [sp, #4]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4603      	mov	r3, r0
 8008604:	462a      	mov	r2, r5
 8008606:	4621      	mov	r1, r4
 8008608:	4817      	ldr	r0, [pc, #92]	; (8008668 <main+0xd4>)
 800860a:	f000 fa9f 	bl	8008b4c <PIDInit>

  //HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800860e:	2104      	movs	r1, #4
 8008610:	4816      	ldr	r0, [pc, #88]	; (800866c <main+0xd8>)
 8008612:	f7fb fc8f 	bl	8003f34 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8008616:	2100      	movs	r1, #0
 8008618:	4815      	ldr	r0, [pc, #84]	; (8008670 <main+0xdc>)
 800861a:	f7fb fb47 	bl	8003cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800861e:	2104      	movs	r1, #4
 8008620:	4813      	ldr	r0, [pc, #76]	; (8008670 <main+0xdc>)
 8008622:	f7fb fb43 	bl	8003cac <HAL_TIM_PWM_Start>
  tick = HAL_GetTick();
 8008626:	f7f8 f9db 	bl	80009e0 <HAL_GetTick>
 800862a:	4603      	mov	r3, r0
 800862c:	4a11      	ldr	r2, [pc, #68]	; (8008674 <main+0xe0>)
 800862e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(BTN_ENABLE_LR_GPIO_Port, BTN_ENABLE_LR_Pin, GPIO_PIN_SET);
 8008630:	2201      	movs	r2, #1
 8008632:	2180      	movs	r1, #128	; 0x80
 8008634:	4810      	ldr	r0, [pc, #64]	; (8008678 <main+0xe4>)
 8008636:	f7f9 f915 	bl	8001864 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  pwmSendOut(500);
 800863a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800863e:	f000 fa55 	bl	8008aec <pwmSendOut>
	  pulsecnt = __HAL_TIM_GET_COUNTER(&htim2);
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <main+0xd8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	461a      	mov	r2, r3
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <main+0xe8>)
 800864c:	601a      	str	r2, [r3, #0]
	  pwmSendOut(500);
 800864e:	e7f4      	b.n	800863a <main+0xa6>
 8008650:	20000118 	.word	0x20000118
 8008654:	20000120 	.word	0x20000120
 8008658:	20000128 	.word	0x20000128
 800865c:	20000130 	.word	0x20000130
 8008660:	20000134 	.word	0x20000134
 8008664:	20000138 	.word	0x20000138
 8008668:	2000047c 	.word	0x2000047c
 800866c:	20000544 	.word	0x20000544
 8008670:	200004fc 	.word	0x200004fc
 8008674:	200001c0 	.word	0x200001c0
 8008678:	40010800 	.word	0x40010800
 800867c:	200001c4 	.word	0x200001c4

08008680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b094      	sub	sp, #80	; 0x50
 8008684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800868a:	2228      	movs	r2, #40	; 0x28
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f001 f9ba 	bl	8009a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008694:	f107 0314 	add.w	r3, r7, #20
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	609a      	str	r2, [r3, #8]
 80086a0:	60da      	str	r2, [r3, #12]
 80086a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086a4:	1d3b      	adds	r3, r7, #4
 80086a6:	2200      	movs	r2, #0
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	609a      	str	r2, [r3, #8]
 80086ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80086ba:	2300      	movs	r3, #0
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80086be:	2301      	movs	r3, #1
 80086c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086c2:	2302      	movs	r3, #2
 80086c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80086c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80086cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80086d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fa fda2 	bl	8003220 <HAL_RCC_OscConfig>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80086e2:	f000 fa2d 	bl	8008b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086e6:	230f      	movs	r3, #15
 80086e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80086ea:	2302      	movs	r3, #2
 80086ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80086f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80086f8:	2300      	movs	r3, #0
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80086fc:	f107 0314 	add.w	r3, r7, #20
 8008700:	2102      	movs	r1, #2
 8008702:	4618      	mov	r0, r3
 8008704:	f7fb f80c 	bl	8003720 <HAL_RCC_ClockConfig>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800870e:	f000 fa17 	bl	8008b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8008712:	2312      	movs	r3, #18
 8008714:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8008716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800871a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800871c:	2300      	movs	r3, #0
 800871e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7fb f964 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800872e:	f000 fa07 	bl	8008b40 <Error_Handler>
  }
}
 8008732:	bf00      	nop
 8008734:	3750      	adds	r7, #80	; 0x50
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	; 0x28
 8008740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8008742:	f107 0310 	add.w	r3, r7, #16
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	605a      	str	r2, [r3, #4]
 800874c:	609a      	str	r2, [r3, #8]
 800874e:	60da      	str	r2, [r3, #12]
 8008750:	611a      	str	r2, [r3, #16]
 8008752:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800875e:	4b32      	ldr	r3, [pc, #200]	; (8008828 <MX_ADC1_Init+0xec>)
 8008760:	4a32      	ldr	r2, [pc, #200]	; (800882c <MX_ADC1_Init+0xf0>)
 8008762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008764:	4b30      	ldr	r3, [pc, #192]	; (8008828 <MX_ADC1_Init+0xec>)
 8008766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800876a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800876c:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <MX_ADC1_Init+0xec>)
 800876e:	2201      	movs	r2, #1
 8008770:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008772:	4b2d      	ldr	r3, [pc, #180]	; (8008828 <MX_ADC1_Init+0xec>)
 8008774:	2200      	movs	r2, #0
 8008776:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008778:	4b2b      	ldr	r3, [pc, #172]	; (8008828 <MX_ADC1_Init+0xec>)
 800877a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800877e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008780:	4b29      	ldr	r3, [pc, #164]	; (8008828 <MX_ADC1_Init+0xec>)
 8008782:	2200      	movs	r2, #0
 8008784:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8008786:	4b28      	ldr	r3, [pc, #160]	; (8008828 <MX_ADC1_Init+0xec>)
 8008788:	2203      	movs	r2, #3
 800878a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800878c:	4826      	ldr	r0, [pc, #152]	; (8008828 <MX_ADC1_Init+0xec>)
 800878e:	f7f8 f931 	bl	80009f4 <HAL_ADC_Init>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8008798:	f000 f9d2 	bl	8008b40 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 800879c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087a0:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2000;
 80087a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80087a6:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = ENABLE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80087b0:	f107 0310 	add.w	r3, r7, #16
 80087b4:	4619      	mov	r1, r3
 80087b6:	481c      	ldr	r0, [pc, #112]	; (8008828 <MX_ADC1_Init+0xec>)
 80087b8:	f7f8 fbc2 	bl	8000f40 <HAL_ADC_AnalogWDGConfig>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80087c2:	f000 f9bd 	bl	8008b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80087c6:	2303      	movs	r3, #3
 80087c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80087ca:	2301      	movs	r3, #1
 80087cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087d2:	1d3b      	adds	r3, r7, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4814      	ldr	r0, [pc, #80]	; (8008828 <MX_ADC1_Init+0xec>)
 80087d8:	f7f8 faba 	bl	8000d50 <HAL_ADC_ConfigChannel>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80087e2:	f000 f9ad 	bl	8008b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80087e6:	2304      	movs	r3, #4
 80087e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80087ea:	2302      	movs	r3, #2
 80087ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087ee:	1d3b      	adds	r3, r7, #4
 80087f0:	4619      	mov	r1, r3
 80087f2:	480d      	ldr	r0, [pc, #52]	; (8008828 <MX_ADC1_Init+0xec>)
 80087f4:	f7f8 faac 	bl	8000d50 <HAL_ADC_ConfigChannel>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80087fe:	f000 f99f 	bl	8008b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008802:	2302      	movs	r3, #2
 8008804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008806:	2303      	movs	r3, #3
 8008808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800880a:	1d3b      	adds	r3, r7, #4
 800880c:	4619      	mov	r1, r3
 800880e:	4806      	ldr	r0, [pc, #24]	; (8008828 <MX_ADC1_Init+0xec>)
 8008810:	f7f8 fa9e 	bl	8000d50 <HAL_ADC_ConfigChannel>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800881a:	f000 f991 	bl	8008b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800881e:	bf00      	nop
 8008820:	3728      	adds	r7, #40	; 0x28
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000428 	.word	0x20000428
 800882c:	40012400 	.word	0x40012400

08008830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b096      	sub	sp, #88	; 0x58
 8008834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008836:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	605a      	str	r2, [r3, #4]
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008844:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800884e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	605a      	str	r2, [r3, #4]
 8008858:	609a      	str	r2, [r3, #8]
 800885a:	60da      	str	r2, [r3, #12]
 800885c:	611a      	str	r2, [r3, #16]
 800885e:	615a      	str	r2, [r3, #20]
 8008860:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	2220      	movs	r2, #32
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f001 f8cd 	bl	8009a08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800886e:	4b45      	ldr	r3, [pc, #276]	; (8008984 <MX_TIM1_Init+0x154>)
 8008870:	4a45      	ldr	r2, [pc, #276]	; (8008988 <MX_TIM1_Init+0x158>)
 8008872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008874:	4b43      	ldr	r3, [pc, #268]	; (8008984 <MX_TIM1_Init+0x154>)
 8008876:	2200      	movs	r2, #0
 8008878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800887a:	4b42      	ldr	r3, [pc, #264]	; (8008984 <MX_TIM1_Init+0x154>)
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8008880:	4b40      	ldr	r3, [pc, #256]	; (8008984 <MX_TIM1_Init+0x154>)
 8008882:	f640 620f 	movw	r2, #3599	; 0xe0f
 8008886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008888:	4b3e      	ldr	r3, [pc, #248]	; (8008984 <MX_TIM1_Init+0x154>)
 800888a:	2200      	movs	r2, #0
 800888c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800888e:	4b3d      	ldr	r3, [pc, #244]	; (8008984 <MX_TIM1_Init+0x154>)
 8008890:	2201      	movs	r2, #1
 8008892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008894:	4b3b      	ldr	r3, [pc, #236]	; (8008984 <MX_TIM1_Init+0x154>)
 8008896:	2200      	movs	r2, #0
 8008898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800889a:	483a      	ldr	r0, [pc, #232]	; (8008984 <MX_TIM1_Init+0x154>)
 800889c:	f7fb f95e 	bl	8003b5c <HAL_TIM_Base_Init>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80088a6:	f000 f94b 	bl	8008b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80088b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80088b4:	4619      	mov	r1, r3
 80088b6:	4833      	ldr	r0, [pc, #204]	; (8008984 <MX_TIM1_Init+0x154>)
 80088b8:	f7fb fc88 	bl	80041cc <HAL_TIM_ConfigClockSource>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80088c2:	f000 f93d 	bl	8008b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80088c6:	482f      	ldr	r0, [pc, #188]	; (8008984 <MX_TIM1_Init+0x154>)
 80088c8:	f7fb f997 	bl	8003bfa <HAL_TIM_PWM_Init>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80088d2:	f000 f935 	bl	8008b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088d6:	2300      	movs	r3, #0
 80088d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088da:	2300      	movs	r3, #0
 80088dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80088de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80088e2:	4619      	mov	r1, r3
 80088e4:	4827      	ldr	r0, [pc, #156]	; (8008984 <MX_TIM1_Init+0x154>)
 80088e6:	f7fb ffd9 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80088f0:	f000 f926 	bl	8008b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088f4:	2360      	movs	r3, #96	; 0x60
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1750;
 80088f8:	f240 63d6 	movw	r3, #1750	; 0x6d6
 80088fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088fe:	2300      	movs	r3, #0
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008902:	2300      	movs	r3, #0
 8008904:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008906:	2300      	movs	r3, #0
 8008908:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800890a:	2300      	movs	r3, #0
 800890c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800890e:	2300      	movs	r3, #0
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008916:	2200      	movs	r2, #0
 8008918:	4619      	mov	r1, r3
 800891a:	481a      	ldr	r0, [pc, #104]	; (8008984 <MX_TIM1_Init+0x154>)
 800891c:	f7fb fb98 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8008926:	f000 f90b 	bl	8008b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800892a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892e:	2204      	movs	r2, #4
 8008930:	4619      	mov	r1, r3
 8008932:	4814      	ldr	r0, [pc, #80]	; (8008984 <MX_TIM1_Init+0x154>)
 8008934:	f7fb fb8c 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800893e:	f000 f8ff 	bl	8008b40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008942:	2300      	movs	r3, #0
 8008944:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800895a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800895c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008960:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4807      	ldr	r0, [pc, #28]	; (8008984 <MX_TIM1_Init+0x154>)
 8008968:	f7fb fff6 	bl	8004958 <HAL_TIMEx_ConfigBreakDeadTime>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8008972:	f000 f8e5 	bl	8008b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008976:	4803      	ldr	r0, [pc, #12]	; (8008984 <MX_TIM1_Init+0x154>)
 8008978:	f000 fad6 	bl	8008f28 <HAL_TIM_MspPostInit>

}
 800897c:	bf00      	nop
 800897e:	3758      	adds	r7, #88	; 0x58
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	200004fc 	.word	0x200004fc
 8008988:	40012c00 	.word	0x40012c00

0800898c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	; 0x30
 8008990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008992:	f107 030c 	add.w	r3, r7, #12
 8008996:	2224      	movs	r2, #36	; 0x24
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f001 f834 	bl	8009a08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80089a8:	4b21      	ldr	r3, [pc, #132]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80089ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80089b0:	4b1f      	ldr	r3, [pc, #124]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089b6:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80089bc:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089c4:	4b1a      	ldr	r3, [pc, #104]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089ca:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80089d0:	2303      	movs	r3, #3
 80089d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80089d4:	2300      	movs	r3, #0
 80089d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80089d8:	2301      	movs	r3, #1
 80089da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80089e4:	2300      	movs	r3, #0
 80089e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80089e8:	2301      	movs	r3, #1
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80089ec:	2300      	movs	r3, #0
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80089f4:	f107 030c 	add.w	r3, r7, #12
 80089f8:	4619      	mov	r1, r3
 80089fa:	480d      	ldr	r0, [pc, #52]	; (8008a30 <MX_TIM2_Init+0xa4>)
 80089fc:	f7fb f9f8 	bl	8003df0 <HAL_TIM_Encoder_Init>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8008a06:	f000 f89b 	bl	8008b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008a12:	1d3b      	adds	r3, r7, #4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4806      	ldr	r0, [pc, #24]	; (8008a30 <MX_TIM2_Init+0xa4>)
 8008a18:	f7fb ff40 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8008a22:	f000 f88d 	bl	8008b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008a26:	bf00      	nop
 8008a28:	3730      	adds	r7, #48	; 0x30
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000544 	.word	0x20000544

08008a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <MX_DMA_Init+0x38>)
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	4a0b      	ldr	r2, [pc, #44]	; (8008a6c <MX_DMA_Init+0x38>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6153      	str	r3, [r2, #20]
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <MX_DMA_Init+0x38>)
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	607b      	str	r3, [r7, #4]
 8008a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	200b      	movs	r0, #11
 8008a58:	f7f8 fbe9 	bl	800122e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008a5c:	200b      	movs	r0, #11
 8008a5e:	f7f8 fc02 	bl	8001266 <HAL_NVIC_EnableIRQ>

}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40021000 	.word	0x40021000

08008a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	609a      	str	r2, [r3, #8]
 8008a82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a84:	4b17      	ldr	r3, [pc, #92]	; (8008ae4 <MX_GPIO_Init+0x74>)
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <MX_GPIO_Init+0x74>)
 8008a8a:	f043 0320 	orr.w	r3, r3, #32
 8008a8e:	6193      	str	r3, [r2, #24]
 8008a90:	4b14      	ldr	r3, [pc, #80]	; (8008ae4 <MX_GPIO_Init+0x74>)
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	607b      	str	r3, [r7, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a9c:	4b11      	ldr	r3, [pc, #68]	; (8008ae4 <MX_GPIO_Init+0x74>)
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	4a10      	ldr	r2, [pc, #64]	; (8008ae4 <MX_GPIO_Init+0x74>)
 8008aa2:	f043 0304 	orr.w	r3, r3, #4
 8008aa6:	6193      	str	r3, [r2, #24]
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <MX_GPIO_Init+0x74>)
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_ENABLE_LR_GPIO_Port, BTN_ENABLE_LR_Pin, GPIO_PIN_RESET);
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2180      	movs	r1, #128	; 0x80
 8008ab8:	480b      	ldr	r0, [pc, #44]	; (8008ae8 <MX_GPIO_Init+0x78>)
 8008aba:	f7f8 fed3 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_ENABLE_LR_Pin */
  GPIO_InitStruct.Pin = BTN_ENABLE_LR_Pin;
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aca:	2302      	movs	r3, #2
 8008acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_ENABLE_LR_GPIO_Port, &GPIO_InitStruct);
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4804      	ldr	r0, [pc, #16]	; (8008ae8 <MX_GPIO_Init+0x78>)
 8008ad6:	f7f8 fd41 	bl	800155c <HAL_GPIO_Init>

}
 8008ada:	bf00      	nop
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	40010800 	.word	0x40010800

08008aec <pwmSendOut>:

/* USER CODE BEGIN 4 */
void pwmSendOut(int32_t setpoint_in)
{
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	if (setpoint_in > 0) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dd08      	ble.n	8008b0c <pwmSendOut+0x20>
		/* Motor Rotate Forward Direction */
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,setpoint_in);
 8008afa:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <pwmSendOut+0x50>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <pwmSendOut+0x50>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2200      	movs	r2, #0
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
	 else {
		 /* Motor Rotate Reverse Direction */
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, fabs(setpoint_in));
	 }
}
 8008b0a:	e013      	b.n	8008b34 <pwmSendOut+0x48>
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8008b0c:	4b0b      	ldr	r3, [pc, #44]	; (8008b3c <pwmSendOut+0x50>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, fabs(setpoint_in));
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7f7 fc6b 	bl	80003f0 <__aeabi_i2d>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4614      	mov	r4, r2
 8008b20:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <pwmSendOut+0x50>)
 8008b26:	681e      	ldr	r6, [r3, #0]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	f7f7 fcca 	bl	80004c4 <__aeabi_d2uiz>
 8008b30:	4603      	mov	r3, r0
 8008b32:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3c:	200004fc 	.word	0x200004fc

08008b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <PIDInit>:
// Functions
//*********************************************************************************
void PIDInit(PIDControl *pid, float kp, float ki, float kd, 
             float sampleTimeSeconds, float minOutput, float maxOutput, 
             PIDMode mode, PIDDirection controllerDirection)     	
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
    pid->controllerDirection = controllerDirection;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pid->mode = mode;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    pid->iTerm = 0.0f;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
    pid->input = 0.0f;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
    pid->lastInput = 0.0f;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	605a      	str	r2, [r3, #4]
    pid->output = 0.0f;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	609a      	str	r2, [r3, #8]
    pid->setpoint = 0.0f;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	635a      	str	r2, [r3, #52]	; 0x34
    
    if(sampleTimeSeconds > 0.0f)
 8008b96:	f04f 0100 	mov.w	r1, #0
 8008b9a:	69b8      	ldr	r0, [r7, #24]
 8008b9c:	f7f7 febe 	bl	800091c <__aeabi_fcmpgt>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <PIDInit+0x62>
    {
        pid->sampleTime = sampleTimeSeconds;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28
 8008bac:	e003      	b.n	8008bb6 <PIDInit+0x6a>
    }
    else
    {
        // If the passed parameter was incorrect, set to 1 second
        pid->sampleTime = 1.0f;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008bb4:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    PIDOutputLimitsSet(pid, minOutput, maxOutput);
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	69f9      	ldr	r1, [r7, #28]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f80a 	bl	8008bd4 <PIDOutputLimitsSet>
    PIDTuningsSet(pid, kp, ki, kd);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f855 	bl	8008c76 <PIDTuningsSet>
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <PIDOutputLimitsSet>:
    pid->mode = mode;
}

void 
PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
    // Check if the parameters are valid
    if(min >= max)
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	68b8      	ldr	r0, [r7, #8]
 8008be4:	f7f7 fe90 	bl	8000908 <__aeabi_fcmpge>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d13f      	bne.n	8008c6e <PIDOutputLimitsSet+0x9a>
    {
        return;
    }
    
    // Save the parameters
    pid->outMin = min;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->outMax = max;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    // If in automatic, apply the new constraints
    if(pid->mode == AUTOMATIC)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d135      	bne.n	8008c70 <PIDOutputLimitsSet+0x9c>
    {
        pid->output = CONSTRAIN(pid->output, min, max);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	68b8      	ldr	r0, [r7, #8]
 8008c0c:	f7f7 fe86 	bl	800091c <__aeabi_fcmpgt>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <PIDOutputLimitsSet+0x46>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	e00c      	b.n	8008c34 <PIDOutputLimitsSet+0x60>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7f7 fe5d 	bl	80008e0 <__aeabi_fcmplt>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <PIDOutputLimitsSet+0x5c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	e001      	b.n	8008c34 <PIDOutputLimitsSet+0x60>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	6093      	str	r3, [r2, #8]
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	68b8      	ldr	r0, [r7, #8]
 8008c40:	f7f7 fe6c 	bl	800091c <__aeabi_fcmpgt>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <PIDOutputLimitsSet+0x7a>
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	e00c      	b.n	8008c68 <PIDOutputLimitsSet+0x94>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7f7 fe43 	bl	80008e0 <__aeabi_fcmplt>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <PIDOutputLimitsSet+0x90>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	e001      	b.n	8008c68 <PIDOutputLimitsSet+0x94>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	6253      	str	r3, [r2, #36]	; 0x24
 8008c6c:	e000      	b.n	8008c70 <PIDOutputLimitsSet+0x9c>
        return;
 8008c6e:	bf00      	nop
    }
}
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <PIDTuningsSet>:

void 
PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                                         
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	603b      	str	r3, [r7, #0]
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 8008c84:	f04f 0100 	mov.w	r1, #0
 8008c88:	68b8      	ldr	r0, [r7, #8]
 8008c8a:	f7f7 fe29 	bl	80008e0 <__aeabi_fcmplt>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d147      	bne.n	8008d24 <PIDTuningsSet+0xae>
 8008c94:	f04f 0100 	mov.w	r1, #0
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f7 fe21 	bl	80008e0 <__aeabi_fcmplt>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d13f      	bne.n	8008d24 <PIDTuningsSet+0xae>
 8008ca4:	f04f 0100 	mov.w	r1, #0
 8008ca8:	6838      	ldr	r0, [r7, #0]
 8008caa:	f7f7 fe19 	bl	80008e0 <__aeabi_fcmplt>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d137      	bne.n	8008d24 <PIDTuningsSet+0xae>
    {
        return;
    }
    
    // Save the parameters for displaying purposes
    pid->dispKp = kp;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
    pid->dispKi = ki;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	611a      	str	r2, [r3, #16]
    pid->dispKd = kd;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	615a      	str	r2, [r3, #20]
    
    // Alter the parameters for PID
    pid->alteredKp = kp;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	619a      	str	r2, [r3, #24]
    pid->alteredKi = ki * pid->sampleTime;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f7 fc66 	bl	80005a4 <__aeabi_fmul>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	61da      	str	r2, [r3, #28]
    pid->alteredKd = kd / pid->sampleTime;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6838      	ldr	r0, [r7, #0]
 8008ce8:	f7f7 fd10 	bl	800070c <__aeabi_fdiv>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	621a      	str	r2, [r3, #32]
    
    // Apply reverse direction to the altered values if necessary
    if(pid->controllerDirection == REVERSE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d113      	bne.n	8008d26 <PIDTuningsSet+0xb0>
    {
        pid->alteredKp = -(pid->alteredKp);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	619a      	str	r2, [r3, #24]
        pid->alteredKi = -(pid->alteredKi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	61da      	str	r2, [r3, #28]
        pid->alteredKd = -(pid->alteredKd);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	621a      	str	r2, [r3, #32]
 8008d22:	e000      	b.n	8008d26 <PIDTuningsSet+0xb0>
        return;
 8008d24:	bf00      	nop
    }
}
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008d32:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <HAL_MspInit+0x5c>)
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	4a14      	ldr	r2, [pc, #80]	; (8008d88 <HAL_MspInit+0x5c>)
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	6193      	str	r3, [r2, #24]
 8008d3e:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <HAL_MspInit+0x5c>)
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	60bb      	str	r3, [r7, #8]
 8008d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <HAL_MspInit+0x5c>)
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	4a0e      	ldr	r2, [pc, #56]	; (8008d88 <HAL_MspInit+0x5c>)
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d54:	61d3      	str	r3, [r2, #28]
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <HAL_MspInit+0x5c>)
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5e:	607b      	str	r3, [r7, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008d62:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <HAL_MspInit+0x60>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	4a04      	ldr	r2, [pc, #16]	; (8008d8c <HAL_MspInit+0x60>)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	40010000 	.word	0x40010000

08008d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d98:	f107 0310 	add.w	r3, r7, #16
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a2d      	ldr	r2, [pc, #180]	; (8008e60 <HAL_ADC_MspInit+0xd0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d152      	bne.n	8008e56 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008db0:	4b2c      	ldr	r3, [pc, #176]	; (8008e64 <HAL_ADC_MspInit+0xd4>)
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	4a2b      	ldr	r2, [pc, #172]	; (8008e64 <HAL_ADC_MspInit+0xd4>)
 8008db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dba:	6193      	str	r3, [r2, #24]
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <HAL_ADC_MspInit+0xd4>)
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc8:	4b26      	ldr	r3, [pc, #152]	; (8008e64 <HAL_ADC_MspInit+0xd4>)
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	4a25      	ldr	r2, [pc, #148]	; (8008e64 <HAL_ADC_MspInit+0xd4>)
 8008dce:	f043 0304 	orr.w	r3, r3, #4
 8008dd2:	6193      	str	r3, [r2, #24]
 8008dd4:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <HAL_ADC_MspInit+0xd4>)
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	60bb      	str	r3, [r7, #8]
 8008dde:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT_Pin|BTN_IS1_Pin|BTN_IS2_Pin;
 8008de0:	231c      	movs	r3, #28
 8008de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008de4:	2303      	movs	r3, #3
 8008de6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008de8:	f107 0310 	add.w	r3, r7, #16
 8008dec:	4619      	mov	r1, r3
 8008dee:	481e      	ldr	r0, [pc, #120]	; (8008e68 <HAL_ADC_MspInit+0xd8>)
 8008df0:	f7f8 fbb4 	bl	800155c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008df4:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008df6:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <HAL_ADC_MspInit+0xe0>)
 8008df8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008dfa:	4b1c      	ldr	r3, [pc, #112]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e00:	4b1a      	ldr	r3, [pc, #104]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008e06:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e08:	2280      	movs	r2, #128	; 0x80
 8008e0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008e0c:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008e14:	4b15      	ldr	r3, [pc, #84]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008e1c:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e1e:	2220      	movs	r2, #32
 8008e20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008e22:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008e2a:	4810      	ldr	r0, [pc, #64]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e2c:	f7f8 fa36 	bl	800129c <HAL_DMA_Init>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8008e36:	f7ff fe83 	bl	8008b40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a0b      	ldr	r2, [pc, #44]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e3e:	621a      	str	r2, [r3, #32]
 8008e40:	4a0a      	ldr	r2, [pc, #40]	; (8008e6c <HAL_ADC_MspInit+0xdc>)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008e46:	2200      	movs	r2, #0
 8008e48:	2100      	movs	r1, #0
 8008e4a:	2012      	movs	r0, #18
 8008e4c:	f7f8 f9ef 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008e50:	2012      	movs	r0, #18
 8008e52:	f7f8 fa08 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008e56:	bf00      	nop
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40012400 	.word	0x40012400
 8008e64:	40021000 	.word	0x40021000
 8008e68:	40010800 	.word	0x40010800
 8008e6c:	200004b8 	.word	0x200004b8
 8008e70:	40020008 	.word	0x40020008

08008e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <HAL_TIM_Base_MspInit+0x34>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d10b      	bne.n	8008e9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <HAL_TIM_Base_MspInit+0x38>)
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	4a08      	ldr	r2, [pc, #32]	; (8008eac <HAL_TIM_Base_MspInit+0x38>)
 8008e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e90:	6193      	str	r3, [r2, #24]
 8008e92:	4b06      	ldr	r3, [pc, #24]	; (8008eac <HAL_TIM_Base_MspInit+0x38>)
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bc80      	pop	{r7}
 8008ea6:	4770      	bx	lr
 8008ea8:	40012c00 	.word	0x40012c00
 8008eac:	40021000 	.word	0x40021000

08008eb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	609a      	str	r2, [r3, #8]
 8008ec4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ece:	d123      	bne.n	8008f18 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008ed0:	4b13      	ldr	r3, [pc, #76]	; (8008f20 <HAL_TIM_Encoder_MspInit+0x70>)
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	4a12      	ldr	r2, [pc, #72]	; (8008f20 <HAL_TIM_Encoder_MspInit+0x70>)
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	61d3      	str	r3, [r2, #28]
 8008edc:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <HAL_TIM_Encoder_MspInit+0x70>)
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ee8:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <HAL_TIM_Encoder_MspInit+0x70>)
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	4a0c      	ldr	r2, [pc, #48]	; (8008f20 <HAL_TIM_Encoder_MspInit+0x70>)
 8008eee:	f043 0304 	orr.w	r3, r3, #4
 8008ef2:	6193      	str	r3, [r2, #24]
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <HAL_TIM_Encoder_MspInit+0x70>)
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	60bb      	str	r3, [r7, #8]
 8008efe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_CHN_A_Pin|ENCODER_CHN_B_Pin;
 8008f00:	2303      	movs	r3, #3
 8008f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f0c:	f107 0310 	add.w	r3, r7, #16
 8008f10:	4619      	mov	r1, r3
 8008f12:	4804      	ldr	r0, [pc, #16]	; (8008f24 <HAL_TIM_Encoder_MspInit+0x74>)
 8008f14:	f7f8 fb22 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008f18:	bf00      	nop
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	40021000 	.word	0x40021000
 8008f24:	40010800 	.word	0x40010800

08008f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f30:	f107 0310 	add.w	r3, r7, #16
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	609a      	str	r2, [r3, #8]
 8008f3c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a10      	ldr	r2, [pc, #64]	; (8008f84 <HAL_TIM_MspPostInit+0x5c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d118      	bne.n	8008f7a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <HAL_TIM_MspPostInit+0x60>)
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	4a0e      	ldr	r2, [pc, #56]	; (8008f88 <HAL_TIM_MspPostInit+0x60>)
 8008f4e:	f043 0304 	orr.w	r3, r3, #4
 8008f52:	6193      	str	r3, [r2, #24]
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <HAL_TIM_MspPostInit+0x60>)
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_F_Pin|PWM_R_Pin;
 8008f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f66:	2302      	movs	r3, #2
 8008f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f6e:	f107 0310 	add.w	r3, r7, #16
 8008f72:	4619      	mov	r1, r3
 8008f74:	4805      	ldr	r0, [pc, #20]	; (8008f8c <HAL_TIM_MspPostInit+0x64>)
 8008f76:	f7f8 faf1 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008f7a:	bf00      	nop
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40012c00 	.word	0x40012c00
 8008f88:	40021000 	.word	0x40021000
 8008f8c:	40010800 	.word	0x40010800

08008f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr

08008f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fa0:	e7fe      	b.n	8008fa0 <HardFault_Handler+0x4>

08008fa2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fa6:	e7fe      	b.n	8008fa6 <MemManage_Handler+0x4>

08008fa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fac:	e7fe      	b.n	8008fac <BusFault_Handler+0x4>

08008fae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fb2:	e7fe      	b.n	8008fb2 <UsageFault_Handler+0x4>

08008fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fb8:	bf00      	nop
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr

08008fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fc4:	bf00      	nop
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr

08008fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008fd0:	bf00      	nop
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008fdc:	f7f7 fcee 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008fe0:	bf00      	nop
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008fe8:	4802      	ldr	r0, [pc, #8]	; (8008ff4 <DMA1_Channel1_IRQHandler+0x10>)
 8008fea:	f7f8 f9b1 	bl	8001350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008fee:	bf00      	nop
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	200004b8 	.word	0x200004b8

08008ff8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008ffc:	4802      	ldr	r0, [pc, #8]	; (8009008 <ADC1_2_IRQHandler+0x10>)
 8008ffe:	f7f7 fdd1 	bl	8000ba4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8009002:	bf00      	nop
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20000428 	.word	0x20000428

0800900c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009010:	4802      	ldr	r0, [pc, #8]	; (800901c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8009012:	f7f8 fd70 	bl	8001af6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8009016:	bf00      	nop
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	2000102c 	.word	0x2000102c

08009020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8009024:	4b15      	ldr	r3, [pc, #84]	; (800907c <SystemInit+0x5c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a14      	ldr	r2, [pc, #80]	; (800907c <SystemInit+0x5c>)
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8009030:	4b12      	ldr	r3, [pc, #72]	; (800907c <SystemInit+0x5c>)
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	4911      	ldr	r1, [pc, #68]	; (800907c <SystemInit+0x5c>)
 8009036:	4b12      	ldr	r3, [pc, #72]	; (8009080 <SystemInit+0x60>)
 8009038:	4013      	ands	r3, r2
 800903a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800903c:	4b0f      	ldr	r3, [pc, #60]	; (800907c <SystemInit+0x5c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a0e      	ldr	r2, [pc, #56]	; (800907c <SystemInit+0x5c>)
 8009042:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800904a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800904c:	4b0b      	ldr	r3, [pc, #44]	; (800907c <SystemInit+0x5c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <SystemInit+0x5c>)
 8009052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009056:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <SystemInit+0x5c>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	4a07      	ldr	r2, [pc, #28]	; (800907c <SystemInit+0x5c>)
 800905e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8009062:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <SystemInit+0x5c>)
 8009066:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800906a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800906c:	4b05      	ldr	r3, [pc, #20]	; (8009084 <SystemInit+0x64>)
 800906e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009072:	609a      	str	r2, [r3, #8]
#endif 
}
 8009074:	bf00      	nop
 8009076:	46bd      	mov	sp, r7
 8009078:	bc80      	pop	{r7}
 800907a:	4770      	bx	lr
 800907c:	40021000 	.word	0x40021000
 8009080:	f8ff0000 	.word	0xf8ff0000
 8009084:	e000ed00 	.word	0xe000ed00

08009088 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800908c:	2200      	movs	r2, #0
 800908e:	4912      	ldr	r1, [pc, #72]	; (80090d8 <MX_USB_DEVICE_Init+0x50>)
 8009090:	4812      	ldr	r0, [pc, #72]	; (80090dc <MX_USB_DEVICE_Init+0x54>)
 8009092:	f7fe f9e5 	bl	8007460 <USBD_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800909c:	f7ff fd50 	bl	8008b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090a0:	490f      	ldr	r1, [pc, #60]	; (80090e0 <MX_USB_DEVICE_Init+0x58>)
 80090a2:	480e      	ldr	r0, [pc, #56]	; (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090a4:	f7fe fa07 	bl	80074b6 <USBD_RegisterClass>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ae:	f7ff fd47 	bl	8008b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090b2:	490c      	ldr	r1, [pc, #48]	; (80090e4 <MX_USB_DEVICE_Init+0x5c>)
 80090b4:	4809      	ldr	r0, [pc, #36]	; (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090b6:	f7fe f967 	bl	8007388 <USBD_CDC_RegisterInterface>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090c0:	f7ff fd3e 	bl	8008b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090c4:	4805      	ldr	r0, [pc, #20]	; (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090c6:	f7fe fa0f 	bl	80074e8 <USBD_Start>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090d0:	f7ff fd36 	bl	8008b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090d4:	bf00      	nop
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000150 	.word	0x20000150
 80090dc:	20000594 	.word	0x20000594
 80090e0:	20000014 	.word	0x20000014
 80090e4:	20000140 	.word	0x20000140

080090e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090ec:	2200      	movs	r2, #0
 80090ee:	4905      	ldr	r1, [pc, #20]	; (8009104 <CDC_Init_FS+0x1c>)
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <CDC_Init_FS+0x20>)
 80090f2:	f7fe f95f 	bl	80073b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090f6:	4905      	ldr	r1, [pc, #20]	; (800910c <CDC_Init_FS+0x24>)
 80090f8:	4803      	ldr	r0, [pc, #12]	; (8009108 <CDC_Init_FS+0x20>)
 80090fa:	f7fe f974 	bl	80073e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009100:	4618      	mov	r0, r3
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20000c40 	.word	0x20000c40
 8009108:	20000594 	.word	0x20000594
 800910c:	20000858 	.word	0x20000858

08009110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009116:	4618      	mov	r0, r3
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr
	...

08009120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
 800912c:	4613      	mov	r3, r2
 800912e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b23      	cmp	r3, #35	; 0x23
 8009134:	d84a      	bhi.n	80091cc <CDC_Control_FS+0xac>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <CDC_Control_FS+0x1c>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	080091cd 	.word	0x080091cd
 8009140:	080091cd 	.word	0x080091cd
 8009144:	080091cd 	.word	0x080091cd
 8009148:	080091cd 	.word	0x080091cd
 800914c:	080091cd 	.word	0x080091cd
 8009150:	080091cd 	.word	0x080091cd
 8009154:	080091cd 	.word	0x080091cd
 8009158:	080091cd 	.word	0x080091cd
 800915c:	080091cd 	.word	0x080091cd
 8009160:	080091cd 	.word	0x080091cd
 8009164:	080091cd 	.word	0x080091cd
 8009168:	080091cd 	.word	0x080091cd
 800916c:	080091cd 	.word	0x080091cd
 8009170:	080091cd 	.word	0x080091cd
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091cd 	.word	0x080091cd
 800917c:	080091cd 	.word	0x080091cd
 8009180:	080091cd 	.word	0x080091cd
 8009184:	080091cd 	.word	0x080091cd
 8009188:	080091cd 	.word	0x080091cd
 800918c:	080091cd 	.word	0x080091cd
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091cd 	.word	0x080091cd
 8009198:	080091cd 	.word	0x080091cd
 800919c:	080091cd 	.word	0x080091cd
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091cd 	.word	0x080091cd
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091cd 	.word	0x080091cd
 80091c4:	080091cd 	.word	0x080091cd
 80091c8:	080091cd 	.word	0x080091cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091cc:	bf00      	nop
  }

  return (USBD_OK);
 80091ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop

080091dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4805      	ldr	r0, [pc, #20]	; (8009200 <CDC_Receive_FS+0x24>)
 80091ea:	f7fe f8fc 	bl	80073e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091ee:	4804      	ldr	r0, [pc, #16]	; (8009200 <CDC_Receive_FS+0x24>)
 80091f0:	f7fe f90c 	bl	800740c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000594 	.word	0x20000594

08009204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a0d      	ldr	r2, [pc, #52]	; (8009248 <HAL_PCD_MspInit+0x44>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d113      	bne.n	800923e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <HAL_PCD_MspInit+0x48>)
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	4a0c      	ldr	r2, [pc, #48]	; (800924c <HAL_PCD_MspInit+0x48>)
 800921c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009220:	61d3      	str	r3, [r2, #28]
 8009222:	4b0a      	ldr	r3, [pc, #40]	; (800924c <HAL_PCD_MspInit+0x48>)
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800922e:	2200      	movs	r2, #0
 8009230:	2100      	movs	r1, #0
 8009232:	2014      	movs	r0, #20
 8009234:	f7f7 fffb 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009238:	2014      	movs	r0, #20
 800923a:	f7f8 f814 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40005c00 	.word	0x40005c00
 800924c:	40021000 	.word	0x40021000

08009250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe f986 	bl	8007578 <USBD_LL_SetupStage>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009286:	78fa      	ldrb	r2, [r7, #3]
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	440b      	add	r3, r1
 8009294:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	4619      	mov	r1, r3
 800929e:	f7fe f9b8 	bl	8007612 <USBD_LL_DataOutStage>
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	440b      	add	r3, r1
 80092ca:	333c      	adds	r3, #60	; 0x3c
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f7fe fa0f 	bl	80076f4 <USBD_LL_DataInStage>
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe fb1f 	bl	8007930 <USBD_LL_SOF>
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009302:	2301      	movs	r3, #1
 8009304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d001      	beq.n	8009312 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800930e:	f7ff fc17 	bl	8008b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009318:	7bfa      	ldrb	r2, [r7, #15]
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe facf 	bl	80078c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe fa88 	bl	800783e <USBD_LL_Reset>
}
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe fac9 	bl	80078de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <HAL_PCD_SuspendCallback+0x30>)
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	4a03      	ldr	r2, [pc, #12]	; (8009368 <HAL_PCD_SuspendCallback+0x30>)
 800935a:	f043 0306 	orr.w	r3, r3, #6
 800935e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	e000ed00 	.word	0xe000ed00

0800936c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fac3 	bl	8007906 <USBD_LL_Resume>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009390:	4a28      	ldr	r2, [pc, #160]	; (8009434 <USBD_LL_Init+0xac>)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a26      	ldr	r2, [pc, #152]	; (8009434 <USBD_LL_Init+0xac>)
 800939c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093a0:	4b24      	ldr	r3, [pc, #144]	; (8009434 <USBD_LL_Init+0xac>)
 80093a2:	4a25      	ldr	r2, [pc, #148]	; (8009438 <USBD_LL_Init+0xb0>)
 80093a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093a6:	4b23      	ldr	r3, [pc, #140]	; (8009434 <USBD_LL_Init+0xac>)
 80093a8:	2208      	movs	r2, #8
 80093aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093ac:	4b21      	ldr	r3, [pc, #132]	; (8009434 <USBD_LL_Init+0xac>)
 80093ae:	2202      	movs	r2, #2
 80093b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093b2:	4b20      	ldr	r3, [pc, #128]	; (8009434 <USBD_LL_Init+0xac>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80093b8:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <USBD_LL_Init+0xac>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80093be:	4b1d      	ldr	r3, [pc, #116]	; (8009434 <USBD_LL_Init+0xac>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093c4:	481b      	ldr	r0, [pc, #108]	; (8009434 <USBD_LL_Init+0xac>)
 80093c6:	f7f8 fa65 	bl	8001894 <HAL_PCD_Init>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80093d0:	f7ff fbb6 	bl	8008b40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093da:	2318      	movs	r3, #24
 80093dc:	2200      	movs	r2, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	f7f9 fedb 	bl	800319a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093ea:	2358      	movs	r3, #88	; 0x58
 80093ec:	2200      	movs	r2, #0
 80093ee:	2180      	movs	r1, #128	; 0x80
 80093f0:	f7f9 fed3 	bl	800319a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093fa:	23c0      	movs	r3, #192	; 0xc0
 80093fc:	2200      	movs	r2, #0
 80093fe:	2181      	movs	r1, #129	; 0x81
 8009400:	f7f9 fecb 	bl	800319a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800940a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800940e:	2200      	movs	r2, #0
 8009410:	2101      	movs	r1, #1
 8009412:	f7f9 fec2 	bl	800319a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800941c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009420:	2200      	movs	r2, #0
 8009422:	2182      	movs	r1, #130	; 0x82
 8009424:	f7f9 feb9 	bl	800319a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	2000102c 	.word	0x2000102c
 8009438:	40005c00 	.word	0x40005c00

0800943c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009452:	4618      	mov	r0, r3
 8009454:	f7f8 fb29 	bl	8001aaa <HAL_PCD_Start>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f94e 	bl	8009700 <USBD_Get_USB_Status>
 8009464:	4603      	mov	r3, r0
 8009466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009468:	7bbb      	ldrb	r3, [r7, #14]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	461a      	mov	r2, r3
 8009480:	4603      	mov	r3, r0
 8009482:	70fb      	strb	r3, [r7, #3]
 8009484:	460b      	mov	r3, r1
 8009486:	70bb      	strb	r3, [r7, #2]
 8009488:	4613      	mov	r3, r2
 800948a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800949a:	78bb      	ldrb	r3, [r7, #2]
 800949c:	883a      	ldrh	r2, [r7, #0]
 800949e:	78f9      	ldrb	r1, [r7, #3]
 80094a0:	f7f8 fca3 	bl	8001dea <HAL_PCD_EP_Open>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f928 	bl	8009700 <USBD_Get_USB_Status>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094d8:	78fa      	ldrb	r2, [r7, #3]
 80094da:	4611      	mov	r1, r2
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f8 fcea 	bl	8001eb6 <HAL_PCD_EP_Close>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 f909 	bl	8009700 <USBD_Get_USB_Status>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	4611      	mov	r1, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7f8 fdaa 	bl	8002074 <HAL_PCD_EP_SetStall>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f8ea 	bl	8009700 <USBD_Get_USB_Status>
 800952c:	4603      	mov	r3, r0
 800952e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009530:	7bbb      	ldrb	r3, [r7, #14]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7f8 fdeb 	bl	8002134 <HAL_PCD_EP_ClrStall>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f8cb 	bl	8009700 <USBD_Get_USB_Status>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800958a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800958c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009590:	2b00      	cmp	r3, #0
 8009592:	da0c      	bge.n	80095ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800959a:	68f9      	ldr	r1, [r7, #12]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	440b      	add	r3, r1
 80095a8:	3302      	adds	r3, #2
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	e00b      	b.n	80095c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095b4:	68f9      	ldr	r1, [r7, #12]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	440b      	add	r3, r1
 80095c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7f8 fbd6 	bl	8001da0 <HAL_PCD_SetAddress>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f880 	bl	8009700 <USBD_Get_USB_Status>
 8009600:	4603      	mov	r3, r0
 8009602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009604:	7bbb      	ldrb	r3, [r7, #14]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	461a      	mov	r2, r3
 800961a:	460b      	mov	r3, r1
 800961c:	72fb      	strb	r3, [r7, #11]
 800961e:	4613      	mov	r3, r2
 8009620:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009630:	893b      	ldrh	r3, [r7, #8]
 8009632:	7af9      	ldrb	r1, [r7, #11]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	f7f8 fcda 	bl	8001fee <HAL_PCD_EP_Transmit>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f85d 	bl	8009700 <USBD_Get_USB_Status>
 8009646:	4603      	mov	r3, r0
 8009648:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800964a:	7dbb      	ldrb	r3, [r7, #22]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	461a      	mov	r2, r3
 8009660:	460b      	mov	r3, r1
 8009662:	72fb      	strb	r3, [r7, #11]
 8009664:	4613      	mov	r3, r2
 8009666:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009676:	893b      	ldrh	r3, [r7, #8]
 8009678:	7af9      	ldrb	r1, [r7, #11]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	f7f8 fc63 	bl	8001f46 <HAL_PCD_EP_Receive>
 8009680:	4603      	mov	r3, r0
 8009682:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f83a 	bl	8009700 <USBD_Get_USB_Status>
 800968c:	4603      	mov	r3, r0
 800968e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009690:	7dbb      	ldrb	r3, [r7, #22]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f8 fc85 	bl	8001fc0 <HAL_PCD_EP_GetRxCount>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <USBD_static_malloc+0x14>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr
 80096d4:	200001c8 	.word	0x200001c8

080096d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bc80      	pop	{r7}
 80096e8:	4770      	bx	lr

080096ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr

08009700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	2b03      	cmp	r3, #3
 8009712:	d817      	bhi.n	8009744 <USBD_Get_USB_Status+0x44>
 8009714:	a201      	add	r2, pc, #4	; (adr r2, 800971c <USBD_Get_USB_Status+0x1c>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	0800972d 	.word	0x0800972d
 8009720:	08009733 	.word	0x08009733
 8009724:	08009739 	.word	0x08009739
 8009728:	0800973f 	.word	0x0800973f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	e00b      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009732:	2302      	movs	r3, #2
 8009734:	73fb      	strb	r3, [r7, #15]
    break;
 8009736:	e008      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009738:	2301      	movs	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
    break;
 800973c:	e005      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800973e:	2302      	movs	r3, #2
 8009740:	73fb      	strb	r3, [r7, #15]
    break;
 8009742:	e002      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009744:	2302      	movs	r3, #2
 8009746:	73fb      	strb	r3, [r7, #15]
    break;
 8009748:	bf00      	nop
  }
  return usb_status;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	bc80      	pop	{r7}
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop

08009758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2212      	movs	r2, #18
 8009768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800976a:	4b03      	ldr	r3, [pc, #12]	; (8009778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	bc80      	pop	{r7}
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	2000016c 	.word	0x2000016c

0800977c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2204      	movs	r2, #4
 800978c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800978e:	4b03      	ldr	r3, [pc, #12]	; (800979c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000180 	.word	0x20000180

080097a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	6039      	str	r1, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	4907      	ldr	r1, [pc, #28]	; (80097d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097b6:	4808      	ldr	r0, [pc, #32]	; (80097d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097b8:	f7fe fe0e 	bl	80083d8 <USBD_GetString>
 80097bc:	e004      	b.n	80097c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	4904      	ldr	r1, [pc, #16]	; (80097d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097c2:	4805      	ldr	r0, [pc, #20]	; (80097d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097c4:	f7fe fe08 	bl	80083d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20001318 	.word	0x20001318
 80097d8:	08009a40 	.word	0x08009a40

080097dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	4904      	ldr	r1, [pc, #16]	; (80097fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097ec:	4804      	ldr	r0, [pc, #16]	; (8009800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ee:	f7fe fdf3 	bl	80083d8 <USBD_GetString>
  return USBD_StrDesc;
 80097f2:	4b02      	ldr	r3, [pc, #8]	; (80097fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20001318 	.word	0x20001318
 8009800:	08009a58 	.word	0x08009a58

08009804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	221a      	movs	r2, #26
 8009814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009816:	f000 f843 	bl	80098a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800981a:	4b02      	ldr	r3, [pc, #8]	; (8009824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20000184 	.word	0x20000184

08009828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d105      	bne.n	8009846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	4907      	ldr	r1, [pc, #28]	; (800985c <USBD_FS_ConfigStrDescriptor+0x34>)
 800983e:	4808      	ldr	r0, [pc, #32]	; (8009860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009840:	f7fe fdca 	bl	80083d8 <USBD_GetString>
 8009844:	e004      	b.n	8009850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4904      	ldr	r1, [pc, #16]	; (800985c <USBD_FS_ConfigStrDescriptor+0x34>)
 800984a:	4805      	ldr	r0, [pc, #20]	; (8009860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800984c:	f7fe fdc4 	bl	80083d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001318 	.word	0x20001318
 8009860:	08009a6c 	.word	0x08009a6c

08009864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d105      	bne.n	8009882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	4907      	ldr	r1, [pc, #28]	; (8009898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800987a:	4808      	ldr	r0, [pc, #32]	; (800989c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800987c:	f7fe fdac 	bl	80083d8 <USBD_GetString>
 8009880:	e004      	b.n	800988c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	4904      	ldr	r1, [pc, #16]	; (8009898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009886:	4805      	ldr	r0, [pc, #20]	; (800989c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009888:	f7fe fda6 	bl	80083d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800988c:	4b02      	ldr	r3, [pc, #8]	; (8009898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20001318 	.word	0x20001318
 800989c:	08009a78 	.word	0x08009a78

080098a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098a6:	4b0f      	ldr	r3, [pc, #60]	; (80098e4 <Get_SerialNum+0x44>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098ac:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <Get_SerialNum+0x48>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098b2:	4b0e      	ldr	r3, [pc, #56]	; (80098ec <Get_SerialNum+0x4c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4413      	add	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098c6:	2208      	movs	r2, #8
 80098c8:	4909      	ldr	r1, [pc, #36]	; (80098f0 <Get_SerialNum+0x50>)
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 f814 	bl	80098f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098d0:	2204      	movs	r2, #4
 80098d2:	4908      	ldr	r1, [pc, #32]	; (80098f4 <Get_SerialNum+0x54>)
 80098d4:	68b8      	ldr	r0, [r7, #8]
 80098d6:	f000 f80f 	bl	80098f8 <IntToUnicode>
  }
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	1ffff7e8 	.word	0x1ffff7e8
 80098e8:	1ffff7ec 	.word	0x1ffff7ec
 80098ec:	1ffff7f0 	.word	0x1ffff7f0
 80098f0:	20000186 	.word	0x20000186
 80098f4:	20000196 	.word	0x20000196

080098f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800990a:	2300      	movs	r3, #0
 800990c:	75fb      	strb	r3, [r7, #23]
 800990e:	e027      	b.n	8009960 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	0f1b      	lsrs	r3, r3, #28
 8009914:	2b09      	cmp	r3, #9
 8009916:	d80b      	bhi.n	8009930 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	0f1b      	lsrs	r3, r3, #28
 800991c:	b2da      	uxtb	r2, r3
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	4619      	mov	r1, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	440b      	add	r3, r1
 8009928:	3230      	adds	r2, #48	; 0x30
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	e00a      	b.n	8009946 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	0f1b      	lsrs	r3, r3, #28
 8009934:	b2da      	uxtb	r2, r3
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	4619      	mov	r1, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	440b      	add	r3, r1
 8009940:	3237      	adds	r2, #55	; 0x37
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	3301      	adds	r3, #1
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	4413      	add	r3, r2
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	3301      	adds	r3, #1
 800995e:	75fb      	strb	r3, [r7, #23]
 8009960:	7dfa      	ldrb	r2, [r7, #23]
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	429a      	cmp	r2, r3
 8009966:	d3d3      	bcc.n	8009910 <IntToUnicode+0x18>
  }
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009974:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009976:	e003      	b.n	8009980 <LoopCopyDataInit>

08009978 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009978:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800997a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800997c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800997e:	3104      	adds	r1, #4

08009980 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009980:	480a      	ldr	r0, [pc, #40]	; (80099ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009982:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009984:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009986:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009988:	d3f6      	bcc.n	8009978 <CopyDataInit>
  ldr r2, =_sbss
 800998a:	4a0a      	ldr	r2, [pc, #40]	; (80099b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800998c:	e002      	b.n	8009994 <LoopFillZerobss>

0800998e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800998e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009990:	f842 3b04 	str.w	r3, [r2], #4

08009994 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009994:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8009996:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009998:	d3f9      	bcc.n	800998e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800999a:	f7ff fb41 	bl	8009020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800999e:	f000 f80f 	bl	80099c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80099a2:	f7fe fdf7 	bl	8008594 <main>
  bx lr
 80099a6:	4770      	bx	lr
  ldr r3, =_sidata
 80099a8:	08009aa0 	.word	0x08009aa0
  ldr r0, =_sdata
 80099ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80099b0:	200001a0 	.word	0x200001a0
  ldr r2, =_sbss
 80099b4:	200001a0 	.word	0x200001a0
  ldr r3, = _ebss
 80099b8:	20001518 	.word	0x20001518

080099bc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80099bc:	e7fe      	b.n	80099bc <CAN1_RX1_IRQHandler>
	...

080099c0 <__libc_init_array>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	2600      	movs	r6, #0
 80099c4:	4d0c      	ldr	r5, [pc, #48]	; (80099f8 <__libc_init_array+0x38>)
 80099c6:	4c0d      	ldr	r4, [pc, #52]	; (80099fc <__libc_init_array+0x3c>)
 80099c8:	1b64      	subs	r4, r4, r5
 80099ca:	10a4      	asrs	r4, r4, #2
 80099cc:	42a6      	cmp	r6, r4
 80099ce:	d109      	bne.n	80099e4 <__libc_init_array+0x24>
 80099d0:	f000 f822 	bl	8009a18 <_init>
 80099d4:	2600      	movs	r6, #0
 80099d6:	4d0a      	ldr	r5, [pc, #40]	; (8009a00 <__libc_init_array+0x40>)
 80099d8:	4c0a      	ldr	r4, [pc, #40]	; (8009a04 <__libc_init_array+0x44>)
 80099da:	1b64      	subs	r4, r4, r5
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	42a6      	cmp	r6, r4
 80099e0:	d105      	bne.n	80099ee <__libc_init_array+0x2e>
 80099e2:	bd70      	pop	{r4, r5, r6, pc}
 80099e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e8:	4798      	blx	r3
 80099ea:	3601      	adds	r6, #1
 80099ec:	e7ee      	b.n	80099cc <__libc_init_array+0xc>
 80099ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f2:	4798      	blx	r3
 80099f4:	3601      	adds	r6, #1
 80099f6:	e7f2      	b.n	80099de <__libc_init_array+0x1e>
 80099f8:	08009a98 	.word	0x08009a98
 80099fc:	08009a98 	.word	0x08009a98
 8009a00:	08009a98 	.word	0x08009a98
 8009a04:	08009a9c 	.word	0x08009a9c

08009a08 <memset>:
 8009a08:	4603      	mov	r3, r0
 8009a0a:	4402      	add	r2, r0
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d100      	bne.n	8009a12 <memset+0xa>
 8009a10:	4770      	bx	lr
 8009a12:	f803 1b01 	strb.w	r1, [r3], #1
 8009a16:	e7f9      	b.n	8009a0c <memset+0x4>

08009a18 <_init>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr

08009a24 <_fini>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr
